#version 450 core
#define GRID_DIM_Z 256
#define LIGHT_LIST_MAX_LENGTH 1048576

layout(local_size_x = 16, local_size_y = 16) in;
layout(set = 0, binding = 0) uniform UBO
{
    mat4 view;
    mat4 normal;
    mat4 model;
    mat4 projection_clip;

    vec2 tile_size; // xy
    uvec2 grid_dim; // xy

    vec3 cam_pos;
    float cam_far;

    vec2 resolution;
    uint num_lights;
} ubo_in;
layout (set = 1, binding = 0, r8ui) uniform uimageBuffer grid_flags;
layout (set = 1, binding = 2, r32ui) uniform uimageBuffer grid_light_counts;
layout (set = 1, binding = 3, r32ui) uniform uimageBuffer grid_light_count_total;
layout (set = 1, binding = 4, r32ui) uniform uimageBuffer grid_light_count_offsets;

uint grid_coord_to_grid_idx(uint i, uint j, uint k)
{
    return ubo_in.grid_dim.x * ubo_in.grid_dim.y * k + ubo_in.grid_dim.x * j + i;
}

void main()
{
    if (gl_GlobalInvocationID.z < GRID_DIM_Z && gl_GlobalInvocationID.x < ubo_in.grid_dim.x && gl_GlobalInvocationID.y < ubo_in.grid_dim.y ) {
	int grid_idx = int(gl_GlobalInvocationID.z * ubo_in.grid_dim.x * ubo_in.grid_dim.y + gl_GlobalInvocationID.y * ubo_in.grid_dim.x + gl_GlobalInvocationID.x);
	uint light_count = imageLoad(grid_light_counts, grid_idx).r;
	if (light_count > 0) {
	    uint offset = imageAtomicAdd(grid_light_count_total, 0, light_count);
	    if (offset < LIGHT_LIST_MAX_LENGTH) {
		imageStore(grid_light_count_offsets, grid_idx, uvec4(offset, 0, 0, 0));
	    } else {
		imageStore(grid_flags, grid_idx, uvec4(0));
	    }
	}
    }
}
