// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;

namespace SharpGame
{
	unsafe partial class Vulkan
	{
		private static IntPtr vkCreateInstance_ptr;
		[Calli]
		public static VkResult vkCreateInstance(VkInstanceCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkInstance instance)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyInstance_ptr;
		[Calli]
		public static void vkDestroyInstance(VkInstance instance, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkEnumeratePhysicalDevices_ptr;
		[Calli]
		public static VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint* physicalDeviceCount, VkPhysicalDevice* physicalDevices)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceFeatures_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures features)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceFormatProperties_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties formatProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceImageFormatProperties_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, out VkImageFormatProperties imageFormatProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceProperties_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceQueueFamilyProperties_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint* queueFamilyPropertyCount, VkQueueFamilyProperties* queueFamilyProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceMemoryProperties_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties memoryProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetInstanceProcAddr_ptr;
		[Calli]
		public static IntPtr vkGetInstanceProcAddr(VkInstance instance, byte* name)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDeviceProcAddr_ptr;
		[Calli]
		public static IntPtr vkGetDeviceProcAddr(VkDevice device, byte* name)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateDevice_ptr;
		[Calli]
		public static VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkDevice device)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyDevice_ptr;
		[Calli]
		public static void vkDestroyDevice(VkDevice device, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkEnumerateInstanceExtensionProperties_ptr;
		[Calli]
		public static VkResult vkEnumerateInstanceExtensionProperties(byte* layerName, uint* propertyCount, VkExtensionProperties* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkEnumerateDeviceExtensionProperties_ptr;
		[Calli]
		public static VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, byte* layerName, uint* propertyCount, VkExtensionProperties* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkEnumerateInstanceLayerProperties_ptr;
		[Calli]
		public static VkResult vkEnumerateInstanceLayerProperties(uint* propertyCount, VkLayerProperties* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkEnumerateDeviceLayerProperties_ptr;
		[Calli]
		public static VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint* propertyCount, VkLayerProperties* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDeviceQueue_ptr;
		[Calli]
		public static void vkGetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, out VkQueue queue)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkQueueSubmit_ptr;
		[Calli]
		public static VkResult vkQueueSubmit(VkQueue queue, uint submitCount, VkSubmitInfo* submits, VkFence fence)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkQueueWaitIdle_ptr;
		[Calli]
		public static VkResult vkQueueWaitIdle(VkQueue queue)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDeviceWaitIdle_ptr;
		[Calli]
		public static VkResult vkDeviceWaitIdle(VkDevice device)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkAllocateMemory_ptr;
		[Calli]
		public static VkResult vkAllocateMemory(VkDevice device, VkMemoryAllocateInfo* allocateInfo, VkAllocationCallbacks* allocator, VkDeviceMemory* memory)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkFreeMemory_ptr;
		[Calli]
		public static void vkFreeMemory(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkMapMemory_ptr;
		[Calli]
		public static VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, ulong offset, ulong size, VkMemoryMapFlags flags, void* ppData)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkUnmapMemory_ptr;
		[Calli]
		public static void vkUnmapMemory(VkDevice device, VkDeviceMemory memory)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkFlushMappedMemoryRanges_ptr;
		[Calli]
		public static VkResult vkFlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* memoryRanges)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkInvalidateMappedMemoryRanges_ptr;
		[Calli]
		public static VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* memoryRanges)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDeviceMemoryCommitment_ptr;
		[Calli]
		public static void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, out ulong committedMemoryInBytes)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkBindBufferMemory_ptr;
		[Calli]
		public static VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, ulong memoryOffset)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkBindImageMemory_ptr;
		[Calli]
		public static VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, ulong memoryOffset)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetBufferMemoryRequirements_ptr;
		[Calli]
		public static void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, out VkMemoryRequirements memoryRequirements)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetImageMemoryRequirements_ptr;
		[Calli]
		public static void vkGetImageMemoryRequirements(VkDevice device, VkImage image, out VkMemoryRequirements memoryRequirements)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetImageSparseMemoryRequirements_ptr;
		[Calli]
		public static void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint* sparseMemoryRequirementCount, VkSparseImageMemoryRequirements* sparseMemoryRequirements)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceSparseImageFormatProperties_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlags samples, VkImageUsageFlags usage, VkImageTiling tiling, uint* propertyCount, VkSparseImageFormatProperties* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkQueueBindSparse_ptr;
		[Calli]
		public static VkResult vkQueueBindSparse(VkQueue queue, uint bindInfoCount, VkBindSparseInfo* bindInfo, VkFence fence)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateFence_ptr;
		[Calli]
		public static VkResult vkCreateFence(VkDevice device, VkFenceCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkFence fence)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyFence_ptr;
		[Calli]
		public static void vkDestroyFence(VkDevice device, VkFence fence, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkResetFences_ptr;
		[Calli]
		public static VkResult vkResetFences(VkDevice device, uint fenceCount, VkFence* fences)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetFenceStatus_ptr;
		[Calli]
		public static VkResult vkGetFenceStatus(VkDevice device, VkFence fence)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkWaitForFences_ptr;
		[Calli]
		public static VkResult vkWaitForFences(VkDevice device, uint fenceCount, VkFence* fences, VkBool32 waitAll, ulong timeout)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateSemaphore_ptr;
		[Calli]
		public static VkResult vkCreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkSemaphore semaphore)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroySemaphore_ptr;
		[Calli]
		public static void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateEvent_ptr;
		[Calli]
		public static VkResult vkCreateEvent(VkDevice device, VkEventCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkEvent @event)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyEvent_ptr;
		[Calli]
		public static void vkDestroyEvent(VkDevice device, VkEvent @event, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetEventStatus_ptr;
		[Calli]
		public static VkResult vkGetEventStatus(VkDevice device, VkEvent @event)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkSetEvent_ptr;
		[Calli]
		public static VkResult vkSetEvent(VkDevice device, VkEvent @event)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkResetEvent_ptr;
		[Calli]
		public static VkResult vkResetEvent(VkDevice device, VkEvent @event)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateQueryPool_ptr;
		[Calli]
		public static VkResult vkCreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkQueryPool queryPool)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyQueryPool_ptr;
		[Calli]
		public static void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetQueryPoolResults_ptr;
		[Calli]
		public static VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount, VkPointerSize dataSize, void* data, ulong stride, VkQueryResultFlags flags)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateBuffer_ptr;
		[Calli]
		public static VkResult vkCreateBuffer(VkDevice device, VkBufferCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkBuffer buffer)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyBuffer_ptr;
		[Calli]
		public static void vkDestroyBuffer(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateBufferView_ptr;
		[Calli]
		public static VkResult vkCreateBufferView(VkDevice device, VkBufferViewCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkBufferView view)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyBufferView_ptr;
		[Calli]
		public static void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateImage_ptr;
		[Calli]
		public static VkResult vkCreateImage(VkDevice device, VkImageCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkImage image)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyImage_ptr;
		[Calli]
		public static void vkDestroyImage(VkDevice device, VkImage image, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetImageSubresourceLayout_ptr;
		[Calli]
		public static void vkGetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource* subresource, out VkSubresourceLayout layout)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateImageView_ptr;
		[Calli]
		public static VkResult vkCreateImageView(VkDevice device, VkImageViewCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkImageView view)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyImageView_ptr;
		[Calli]
		public static void vkDestroyImageView(VkDevice device, VkImageView imageView, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateShaderModule_ptr;
		[Calli]
		public static VkResult vkCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkShaderModule shaderModule)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyShaderModule_ptr;
		[Calli]
		public static void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreatePipelineCache_ptr;
		[Calli]
		public static VkResult vkCreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkPipelineCache pipelineCache)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyPipelineCache_ptr;
		[Calli]
		public static void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPipelineCacheData_ptr;
		[Calli]
		public static VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, VkPointerSize* dataSize, void* data)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkMergePipelineCaches_ptr;
		[Calli]
		public static VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, VkPipelineCache* srcCaches)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateGraphicsPipelines_ptr;
		[Calli]
		public static VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateComputePipelines_ptr;
		[Calli]
		public static VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyPipeline_ptr;
		[Calli]
		public static void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreatePipelineLayout_ptr;
		[Calli]
		public static VkResult vkCreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkPipelineLayout pipelineLayout)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyPipelineLayout_ptr;
		[Calli]
		public static void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateSampler_ptr;
		[Calli]
		public static VkResult vkCreateSampler(VkDevice device, VkSamplerCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkSampler sampler)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroySampler_ptr;
		[Calli]
		public static void vkDestroySampler(VkDevice device, VkSampler sampler, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateDescriptorSetLayout_ptr;
		[Calli]
		public static VkResult vkCreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkDescriptorSetLayout setLayout)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyDescriptorSetLayout_ptr;
		[Calli]
		public static void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateDescriptorPool_ptr;
		[Calli]
		public static VkResult vkCreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkDescriptorPool descriptorPool)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyDescriptorPool_ptr;
		[Calli]
		public static void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkResetDescriptorPool_ptr;
		[Calli]
		public static VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkAllocateDescriptorSets_ptr;
		[Calli]
		public static VkResult vkAllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo* allocateInfo, VkDescriptorSet* descriptorSets)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkFreeDescriptorSets_ptr;
		[Calli]
		public static VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, VkDescriptorSet* descriptorSets)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkUpdateDescriptorSets_ptr;
		[Calli]
		public static void vkUpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, VkWriteDescriptorSet* descriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet* descriptorCopies)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateFramebuffer_ptr;
		[Calli]
		public static VkResult vkCreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkFramebuffer framebuffer)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyFramebuffer_ptr;
		[Calli]
		public static void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateRenderPass_ptr;
		[Calli]
		public static VkResult vkCreateRenderPass(VkDevice device, VkRenderPassCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkRenderPass renderPass)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyRenderPass_ptr;
		[Calli]
		public static void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetRenderAreaGranularity_ptr;
		[Calli]
		public static void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, out VkExtent2D granularity)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateCommandPool_ptr;
		[Calli]
		public static VkResult vkCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkCommandPool commandPool)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyCommandPool_ptr;
		[Calli]
		public static void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkResetCommandPool_ptr;
		[Calli]
		public static VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkAllocateCommandBuffers_ptr;
		[Calli]
		public static VkResult vkAllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo* allocateInfo, VkCommandBuffer* commandBuffers)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkFreeCommandBuffers_ptr;
		[Calli]
		public static void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, VkCommandBuffer* commandBuffers)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkBeginCommandBuffer_ptr;
		[Calli]
		public static VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* beginInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkEndCommandBuffer_ptr;
		[Calli]
		public static VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkResetCommandBuffer_ptr;
		[Calli]
		public static VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBindPipeline_ptr;
		[Calli]
		public static void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetViewport_ptr;
		[Calli]
		public static void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewport* viewports)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetScissor_ptr;
		[Calli]
		public static void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, VkRect2D* scissors)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetLineWidth_ptr;
		[Calli]
		public static void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetDepthBias_ptr;
		[Calli]
		public static void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetBlendConstants_ptr;
		[Calli]
		public static void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, float blendConstants)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetDepthBounds_ptr;
		[Calli]
		public static void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetStencilCompareMask_ptr;
		[Calli]
		public static void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint compareMask)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetStencilWriteMask_ptr;
		[Calli]
		public static void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint writeMask)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetStencilReference_ptr;
		[Calli]
		public static void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint reference)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBindDescriptorSets_ptr;
		[Calli]
		public static void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet* descriptorSets, uint dynamicOffsetCount, uint* dynamicOffsets)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBindIndexBuffer_ptr;
		[Calli]
		public static void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkIndexType indexType)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBindVertexBuffers_ptr;
		[Calli]
		public static void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ulong* offsets)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDraw_ptr;
		[Calli]
		public static void vkCmdDraw(VkCommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDrawIndexed_ptr;
		[Calli]
		public static void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDrawIndirect_ptr;
		[Calli]
		public static void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, uint drawCount, uint stride)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDrawIndexedIndirect_ptr;
		[Calli]
		public static void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, uint drawCount, uint stride)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDispatch_ptr;
		[Calli]
		public static void vkCmdDispatch(VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDispatchIndirect_ptr;
		[Calli]
		public static void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdCopyBuffer_ptr;
		[Calli]
		public static void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, VkBufferCopy* regions)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdCopyImage_ptr;
		[Calli]
		public static void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageCopy* regions)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBlitImage_ptr;
		[Calli]
		public static void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageBlit* regions, VkFilter filter)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdCopyBufferToImage_ptr;
		[Calli]
		public static void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkBufferImageCopy* regions)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdCopyImageToBuffer_ptr;
		[Calli]
		public static void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, VkBufferImageCopy* regions)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdUpdateBuffer_ptr;
		[Calli]
		public static void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, ulong dstOffset, ulong dataSize, void* data)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdFillBuffer_ptr;
		[Calli]
		public static void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, ulong dstOffset, ulong size, uint data)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdClearColorImage_ptr;
		[Calli]
		public static void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* color, uint rangeCount, VkImageSubresourceRange* ranges)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdClearDepthStencilImage_ptr;
		[Calli]
		public static void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* depthStencil, uint rangeCount, VkImageSubresourceRange* ranges)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdClearAttachments_ptr;
		[Calli]
		public static void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, VkClearAttachment* attachments, uint rectCount, VkClearRect* rects)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdResolveImage_ptr;
		[Calli]
		public static void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageResolve* regions)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetEvent_ptr;
		[Calli]
		public static void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags stageMask)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdResetEvent_ptr;
		[Calli]
		public static void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags stageMask)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdWaitEvents_ptr;
		[Calli]
		public static void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* events, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* imageMemoryBarriers)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdPipelineBarrier_ptr;
		[Calli]
		public static void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier* memoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* bufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* imageMemoryBarriers)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBeginQuery_ptr;
		[Calli]
		public static void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdEndQuery_ptr;
		[Calli]
		public static void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdResetQueryPool_ptr;
		[Calli]
		public static void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdWriteTimestamp_ptr;
		[Calli]
		public static void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkQueryPool queryPool, uint query)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdCopyQueryPoolResults_ptr;
		[Calli]
		public static void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount, VkBuffer dstBuffer, ulong dstOffset, ulong stride, VkQueryResultFlags flags)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdPushConstants_ptr;
		[Calli]
		public static void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint offset, uint size, void* values)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBeginRenderPass_ptr;
		[Calli]
		public static void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* renderPassBegin, VkSubpassContents contents)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdNextSubpass_ptr;
		[Calli]
		public static void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdEndRenderPass_ptr;
		[Calli]
		public static void vkCmdEndRenderPass(VkCommandBuffer commandBuffer)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdExecuteCommands_ptr;
		[Calli]
		public static void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, VkCommandBuffer* commandBuffers)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkEnumerateInstanceVersion_ptr;
		[Calli]
		public static VkResult vkEnumerateInstanceVersion(out uint apiVersion)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkBindBufferMemory2_ptr;
		[Calli]
		public static VkResult vkBindBufferMemory2(VkDevice device, uint bindInfoCount, VkBindBufferMemoryInfo* bindInfos)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkBindImageMemory2_ptr;
		[Calli]
		public static VkResult vkBindImageMemory2(VkDevice device, uint bindInfoCount, VkBindImageMemoryInfo* bindInfos)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDeviceGroupPeerMemoryFeatures_ptr;
		[Calli]
		public static void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags* peerMemoryFeatures)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetDeviceMask_ptr;
		[Calli]
		public static void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint deviceMask)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDispatchBase_ptr;
		[Calli]
		public static void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkEnumeratePhysicalDeviceGroups_ptr;
		[Calli]
		public static VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint* physicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* physicalDeviceGroupProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetImageMemoryRequirements2_ptr;
		[Calli]
		public static void vkGetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2* info, out VkMemoryRequirements2 memoryRequirements)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetBufferMemoryRequirements2_ptr;
		[Calli]
		public static void vkGetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2* info, out VkMemoryRequirements2 memoryRequirements)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetImageSparseMemoryRequirements2_ptr;
		[Calli]
		public static void vkGetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* info, uint* sparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* sparseMemoryRequirements)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceFeatures2_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures2 features)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceProperties2_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties2 properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceFormatProperties2_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties2 formatProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceImageFormatProperties2_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* imageFormatInfo, out VkImageFormatProperties2 imageFormatProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceQueueFamilyProperties2_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint* queueFamilyPropertyCount, VkQueueFamilyProperties2* queueFamilyProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceMemoryProperties2_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties2 memoryProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceSparseImageFormatProperties2_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* formatInfo, uint* propertyCount, VkSparseImageFormatProperties2* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkTrimCommandPool_ptr;
		[Calli]
		public static void vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDeviceQueue2_ptr;
		[Calli]
		public static void vkGetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2* queueInfo, out VkQueue queue)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateSamplerYcbcrConversion_ptr;
		[Calli]
		public static VkResult vkCreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkSamplerYcbcrConversion ycbcrConversion)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroySamplerYcbcrConversion_ptr;
		[Calli]
		public static void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateDescriptorUpdateTemplate_ptr;
		[Calli]
		public static VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* createInfo, VkAllocationCallbacks* allocator, out VkDescriptorUpdateTemplate descriptorUpdateTemplate)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyDescriptorUpdateTemplate_ptr;
		[Calli]
		public static void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkUpdateDescriptorSetWithTemplate_ptr;
		[Calli]
		public static void vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* data)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceExternalBufferProperties_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* externalBufferInfo, out VkExternalBufferProperties externalBufferProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceExternalFenceProperties_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* externalFenceInfo, out VkExternalFenceProperties externalFenceProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceExternalSemaphoreProperties_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* externalSemaphoreInfo, out VkExternalSemaphoreProperties externalSemaphoreProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDescriptorSetLayoutSupport_ptr;
		[Calli]
		public static void vkGetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, out VkDescriptorSetLayoutSupport support)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDrawIndirectCount_ptr;
		[Calli]
		public static void vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkBuffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDrawIndexedIndirectCount_ptr;
		[Calli]
		public static void vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkBuffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateRenderPass2_ptr;
		[Calli]
		public static VkResult vkCreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* createInfo, VkAllocationCallbacks* allocator, out VkRenderPass renderPass)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBeginRenderPass2_ptr;
		[Calli]
		public static void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* renderPassBegin, VkSubpassBeginInfo* subpassBeginInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdNextSubpass2_ptr;
		[Calli]
		public static void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* subpassBeginInfo, VkSubpassEndInfo* subpassEndInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdEndRenderPass2_ptr;
		[Calli]
		public static void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, VkSubpassEndInfo* subpassEndInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkResetQueryPool_ptr;
		[Calli]
		public static void vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetSemaphoreCounterValue_ptr;
		[Calli]
		public static VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, ulong* value)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkWaitSemaphores_ptr;
		[Calli]
		public static VkResult vkWaitSemaphores(VkDevice device, VkSemaphoreWaitInfo* waitInfo, ulong timeout)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkSignalSemaphore_ptr;
		[Calli]
		public static VkResult vkSignalSemaphore(VkDevice device, VkSemaphoreSignalInfo* signalInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetBufferDeviceAddress_ptr;
		[Calli]
		public static IntPtr vkGetBufferDeviceAddress(VkDevice device, VkBufferDeviceAddressInfo* info)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetBufferOpaqueCaptureAddress_ptr;
		[Calli]
		public static ulong vkGetBufferOpaqueCaptureAddress(VkDevice device, VkBufferDeviceAddressInfo* info)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDeviceMemoryOpaqueCaptureAddress_ptr;
		[Calli]
		public static ulong vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* info)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroySurfaceKHR_ptr;
		[Calli]
		public static void vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceSurfaceSupportKHR_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurfaceKHR surface, out VkBool32 supported)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceSurfaceCapabilitiesKHR_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, out VkSurfaceCapabilitiesKHR surfaceCapabilities)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceSurfaceFormatsKHR_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* surfaceFormatCount, VkSurfaceFormatKHR* surfaceFormats)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceSurfacePresentModesKHR_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* presentModeCount, VkPresentModeKHR* presentModes)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateSwapchainKHR_ptr;
		[Calli]
		public static VkResult vkCreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSwapchainKHR swapchain)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroySwapchainKHR_ptr;
		[Calli]
		public static void vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetSwapchainImagesKHR_ptr;
		[Calli]
		public static VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint* swapchainImageCount, VkImage* swapchainImages)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkAcquireNextImageKHR_ptr;
		[Calli]
		public static VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, out uint imageIndex)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkQueuePresentKHR_ptr;
		[Calli]
		public static VkResult vkQueuePresentKHR(VkQueue queue, VkPresentInfoKHR* presentInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDeviceGroupPresentCapabilitiesKHR_ptr;
		[Calli]
		public static VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, out VkDeviceGroupPresentCapabilitiesKHR deviceGroupPresentCapabilities)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDeviceGroupSurfacePresentModesKHR_ptr;
		[Calli]
		public static VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, out VkDeviceGroupPresentModeFlagsKHR modes)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDevicePresentRectanglesKHR_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* rectCount, VkRect2D* rects)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkAcquireNextImage2KHR_ptr;
		[Calli]
		public static VkResult vkAcquireNextImage2KHR(VkDevice device, VkAcquireNextImageInfoKHR* acquireInfo, out uint imageIndex)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceDisplayPropertiesKHR_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint* propertyCount, VkDisplayPropertiesKHR* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceDisplayPlanePropertiesKHR_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint* propertyCount, VkDisplayPlanePropertiesKHR* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDisplayPlaneSupportedDisplaysKHR_ptr;
		[Calli]
		public static VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, uint* displayCount, VkDisplayKHR* displays)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDisplayModePropertiesKHR_ptr;
		[Calli]
		public static VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint* propertyCount, VkDisplayModePropertiesKHR* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateDisplayModeKHR_ptr;
		[Calli]
		public static VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, VkDisplayModeCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkDisplayModeKHR mode)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDisplayPlaneCapabilitiesKHR_ptr;
		[Calli]
		public static VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint planeIndex, out VkDisplayPlaneCapabilitiesKHR capabilities)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateDisplayPlaneSurfaceKHR_ptr;
		[Calli]
		public static VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, VkDisplaySurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateSharedSwapchainsKHR_ptr;
		[Calli]
		public static VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, VkSwapchainCreateInfoKHR* createInfos, VkAllocationCallbacks* allocator, out VkSwapchainKHR swapchains)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceFeatures2KHR_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceFeatures2 features)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceProperties2KHR_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceProperties2 properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceFormatProperties2KHR_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, out VkFormatProperties2 formatProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceImageFormatProperties2KHR_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* imageFormatInfo, out VkImageFormatProperties2 imageFormatProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceQueueFamilyProperties2KHR_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, uint* queueFamilyPropertyCount, VkQueueFamilyProperties2* queueFamilyProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceMemoryProperties2KHR_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, out VkPhysicalDeviceMemoryProperties2 memoryProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceSparseImageFormatProperties2KHR_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* formatInfo, uint* propertyCount, VkSparseImageFormatProperties2* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDeviceGroupPeerMemoryFeaturesKHR_ptr;
		[Calli]
		public static void vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, out VkPeerMemoryFeatureFlags peerMemoryFeatures)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetDeviceMaskKHR_ptr;
		[Calli]
		public static void vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint deviceMask)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDispatchBaseKHR_ptr;
		[Calli]
		public static void vkCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkTrimCommandPoolKHR_ptr;
		[Calli]
		public static void vkTrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkEnumeratePhysicalDeviceGroupsKHR_ptr;
		[Calli]
		public static VkResult vkEnumeratePhysicalDeviceGroupsKHR(VkInstance instance, uint* physicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* physicalDeviceGroupProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceExternalBufferPropertiesKHR_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* externalBufferInfo, out VkExternalBufferProperties externalBufferProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetMemoryFdKHR_ptr;
		[Calli]
		public static VkResult vkGetMemoryFdKHR(VkDevice device, VkMemoryGetFdInfoKHR* getFdInfo, int* fd)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetMemoryFdPropertiesKHR_ptr;
		[Calli]
		public static VkResult vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, int fd, VkMemoryFdPropertiesKHR* memoryFdProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceExternalSemaphorePropertiesKHR_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* externalSemaphoreInfo, out VkExternalSemaphoreProperties externalSemaphoreProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkImportSemaphoreFdKHR_ptr;
		[Calli]
		public static VkResult vkImportSemaphoreFdKHR(VkDevice device, VkImportSemaphoreFdInfoKHR* importSemaphoreFdInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetSemaphoreFdKHR_ptr;
		[Calli]
		public static VkResult vkGetSemaphoreFdKHR(VkDevice device, VkSemaphoreGetFdInfoKHR* getFdInfo, int* fd)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdPushDescriptorSetKHR_ptr;
		[Calli]
		public static void vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, VkWriteDescriptorSet* descriptorWrites)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdPushDescriptorSetWithTemplateKHR_ptr;
		[Calli]
		public static void vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint set, void* data)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateDescriptorUpdateTemplateKHR_ptr;
		[Calli]
		public static VkResult vkCreateDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkDescriptorUpdateTemplate* descriptorUpdateTemplate)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyDescriptorUpdateTemplateKHR_ptr;
		[Calli]
		public static void vkDestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkUpdateDescriptorSetWithTemplateKHR_ptr;
		[Calli]
		public static void vkUpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* data)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateRenderPass2KHR_ptr;
		[Calli]
		public static VkResult vkCreateRenderPass2KHR(VkDevice device, VkRenderPassCreateInfo2* createInfo, VkAllocationCallbacks* allocator, VkRenderPass* renderPass)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBeginRenderPass2KHR_ptr;
		[Calli]
		public static void vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* renderPassBegin, VkSubpassBeginInfo* subpassBeginInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdNextSubpass2KHR_ptr;
		[Calli]
		public static void vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* subpassBeginInfo, VkSubpassEndInfo* subpassEndInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdEndRenderPass2KHR_ptr;
		[Calli]
		public static void vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, VkSubpassEndInfo* subpassEndInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetSwapchainStatusKHR_ptr;
		[Calli]
		public static VkResult vkGetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceExternalFencePropertiesKHR_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* externalFenceInfo, VkExternalFenceProperties* externalFenceProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkImportFenceFdKHR_ptr;
		[Calli]
		public static VkResult vkImportFenceFdKHR(VkDevice device, VkImportFenceFdInfoKHR* importFenceFdInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetFenceFdKHR_ptr;
		[Calli]
		public static VkResult vkGetFenceFdKHR(VkDevice device, VkFenceGetFdInfoKHR* getFdInfo, int* fd)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR_ptr;
		[Calli]
		public static VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, uint* counterCount, VkPerformanceCounterKHR* counters, VkPerformanceCounterDescriptionKHR* counterDescriptions)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, VkQueryPoolPerformanceCreateInfoKHR* performanceQueryCreateInfo, uint* numPasses)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkAcquireProfilingLockKHR_ptr;
		[Calli]
		public static VkResult vkAcquireProfilingLockKHR(VkDevice device, VkAcquireProfilingLockInfoKHR* info)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkReleaseProfilingLockKHR_ptr;
		[Calli]
		public static void vkReleaseProfilingLockKHR(VkDevice device)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceSurfaceCapabilities2KHR_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* surfaceInfo, VkSurfaceCapabilities2KHR* surfaceCapabilities)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceSurfaceFormats2KHR_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* surfaceInfo, uint* surfaceFormatCount, VkSurfaceFormat2KHR* surfaceFormats)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceDisplayProperties2KHR_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint* propertyCount, VkDisplayProperties2KHR* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceDisplayPlaneProperties2KHR_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint* propertyCount, VkDisplayPlaneProperties2KHR* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDisplayModeProperties2KHR_ptr;
		[Calli]
		public static VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint* propertyCount, VkDisplayModeProperties2KHR* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDisplayPlaneCapabilities2KHR_ptr;
		[Calli]
		public static VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, VkDisplayPlaneInfo2KHR* displayPlaneInfo, VkDisplayPlaneCapabilities2KHR* capabilities)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetImageMemoryRequirements2KHR_ptr;
		[Calli]
		public static void vkGetImageMemoryRequirements2KHR(VkDevice device, VkImageMemoryRequirementsInfo2* info, VkMemoryRequirements2* memoryRequirements)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetBufferMemoryRequirements2KHR_ptr;
		[Calli]
		public static void vkGetBufferMemoryRequirements2KHR(VkDevice device, VkBufferMemoryRequirementsInfo2* info, VkMemoryRequirements2* memoryRequirements)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetImageSparseMemoryRequirements2KHR_ptr;
		[Calli]
		public static void vkGetImageSparseMemoryRequirements2KHR(VkDevice device, VkImageSparseMemoryRequirementsInfo2* info, uint* sparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* sparseMemoryRequirements)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateSamplerYcbcrConversionKHR_ptr;
		[Calli]
		public static VkResult vkCreateSamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversionCreateInfo* createInfo, VkAllocationCallbacks* allocator, VkSamplerYcbcrConversion* ycbcrConversion)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroySamplerYcbcrConversionKHR_ptr;
		[Calli]
		public static void vkDestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkBindBufferMemory2KHR_ptr;
		[Calli]
		public static VkResult vkBindBufferMemory2KHR(VkDevice device, uint bindInfoCount, VkBindBufferMemoryInfo* bindInfos)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkBindImageMemory2KHR_ptr;
		[Calli]
		public static VkResult vkBindImageMemory2KHR(VkDevice device, uint bindInfoCount, VkBindImageMemoryInfo* bindInfos)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDescriptorSetLayoutSupportKHR_ptr;
		[Calli]
		public static void vkGetDescriptorSetLayoutSupportKHR(VkDevice device, VkDescriptorSetLayoutCreateInfo* createInfo, VkDescriptorSetLayoutSupport* support)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDrawIndirectCountKHR_ptr;
		[Calli]
		public static void vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkBuffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDrawIndexedIndirectCountKHR_ptr;
		[Calli]
		public static void vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkBuffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetSemaphoreCounterValueKHR_ptr;
		[Calli]
		public static VkResult vkGetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, ulong* value)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkWaitSemaphoresKHR_ptr;
		[Calli]
		public static VkResult vkWaitSemaphoresKHR(VkDevice device, VkSemaphoreWaitInfo* waitInfo, ulong timeout)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkSignalSemaphoreKHR_ptr;
		[Calli]
		public static VkResult vkSignalSemaphoreKHR(VkDevice device, VkSemaphoreSignalInfo* signalInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceFragmentShadingRatesKHR_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice physicalDevice, uint* fragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* fragmentShadingRates)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetFragmentShadingRateKHR_ptr;
		[Calli]
		public static void vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, VkExtent2D* fragmentSize, VkFragmentShadingRateCombinerOpKHR combinerOps)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetBufferDeviceAddressKHR_ptr;
		[Calli]
		public static IntPtr vkGetBufferDeviceAddressKHR(VkDevice device, VkBufferDeviceAddressInfo* info)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetBufferOpaqueCaptureAddressKHR_ptr;
		[Calli]
		public static ulong vkGetBufferOpaqueCaptureAddressKHR(VkDevice device, VkBufferDeviceAddressInfo* info)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDeviceMemoryOpaqueCaptureAddressKHR_ptr;
		[Calli]
		public static ulong vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* info)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPipelineExecutablePropertiesKHR_ptr;
		[Calli]
		public static VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, VkPipelineInfoKHR* pipelineInfo, uint* executableCount, VkPipelineExecutablePropertiesKHR* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPipelineExecutableStatisticsKHR_ptr;
		[Calli]
		public static VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, VkPipelineExecutableInfoKHR* executableInfo, uint* statisticCount, VkPipelineExecutableStatisticKHR* statistics)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPipelineExecutableInternalRepresentationsKHR_ptr;
		[Calli]
		public static VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, VkPipelineExecutableInfoKHR* executableInfo, uint* internalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* internalRepresentations)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdCopyBuffer2KHR_ptr;
		[Calli]
		public static void vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, VkCopyBufferInfo2KHR* copyBufferInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdCopyImage2KHR_ptr;
		[Calli]
		public static void vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, VkCopyImageInfo2KHR* copyImageInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdCopyBufferToImage2KHR_ptr;
		[Calli]
		public static void vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2KHR* copyBufferToImageInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdCopyImageToBuffer2KHR_ptr;
		[Calli]
		public static void vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2KHR* copyImageToBufferInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBlitImage2KHR_ptr;
		[Calli]
		public static void vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, VkBlitImageInfo2KHR* blitImageInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdResolveImage2KHR_ptr;
		[Calli]
		public static void vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, VkResolveImageInfo2KHR* resolveImageInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateDebugReportCallbackEXT_ptr;
		[Calli]
		public static VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, VkDebugReportCallbackEXT* callback)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyDebugReportCallbackEXT_ptr;
		[Calli]
		public static void vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDebugReportMessageEXT_ptr;
		[Calli]
		public static void vkDebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, ulong @object, VkPointerSize location, int messageCode, byte* layerPrefix, byte* message)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDebugMarkerSetObjectTagEXT_ptr;
		[Calli]
		public static VkResult vkDebugMarkerSetObjectTagEXT(VkDevice device, VkDebugMarkerObjectTagInfoEXT* tagInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDebugMarkerSetObjectNameEXT_ptr;
		[Calli]
		public static VkResult vkDebugMarkerSetObjectNameEXT(VkDevice device, VkDebugMarkerObjectNameInfoEXT* nameInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDebugMarkerBeginEXT_ptr;
		[Calli]
		public static void vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* markerInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDebugMarkerEndEXT_ptr;
		[Calli]
		public static void vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDebugMarkerInsertEXT_ptr;
		[Calli]
		public static void vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* markerInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBindTransformFeedbackBuffersEXT_ptr;
		[Calli]
		public static void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ulong* offsets, ulong* sizes)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBeginTransformFeedbackEXT_ptr;
		[Calli]
		public static void vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer* counterBuffers, ulong* counterBufferOffsets)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdEndTransformFeedbackEXT_ptr;
		[Calli]
		public static void vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer* counterBuffers, ulong* counterBufferOffsets)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBeginQueryIndexedEXT_ptr;
		[Calli]
		public static void vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags, uint index)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdEndQueryIndexedEXT_ptr;
		[Calli]
		public static void vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, uint index)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDrawIndirectByteCountEXT_ptr;
		[Calli]
		public static void vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint instanceCount, uint firstInstance, VkBuffer counterBuffer, ulong counterBufferOffset, uint counterOffset, uint vertexStride)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetImageViewHandleNVX_ptr;
		[Calli]
		public static uint vkGetImageViewHandleNVX(VkDevice device, VkImageViewHandleInfoNVX* info)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetImageViewAddressNVX_ptr;
		[Calli]
		public static VkResult vkGetImageViewAddressNVX(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDrawIndirectCountAMD_ptr;
		[Calli]
		public static void vkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkBuffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDrawIndexedIndirectCountAMD_ptr;
		[Calli]
		public static void vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkBuffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetShaderInfoAMD_ptr;
		[Calli]
		public static VkResult vkGetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlags shaderStage, VkShaderInfoTypeAMD infoType, VkPointerSize* infoSize, void* info)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceExternalImageFormatPropertiesNV_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* externalImageFormatProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBeginConditionalRenderingEXT_ptr;
		[Calli]
		public static void vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, VkConditionalRenderingBeginInfoEXT* conditionalRenderingBegin)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdEndConditionalRenderingEXT_ptr;
		[Calli]
		public static void vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetViewportWScalingNV_ptr;
		[Calli]
		public static void vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewportWScalingNV* viewportWScalings)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkReleaseDisplayEXT_ptr;
		[Calli]
		public static VkResult vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceSurfaceCapabilities2EXT_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* surfaceCapabilities)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDisplayPowerControlEXT_ptr;
		[Calli]
		public static VkResult vkDisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, VkDisplayPowerInfoEXT* displayPowerInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkRegisterDeviceEventEXT_ptr;
		[Calli]
		public static VkResult vkRegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfoEXT* deviceEventInfo, VkAllocationCallbacks* allocator, VkFence* fence)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkRegisterDisplayEventEXT_ptr;
		[Calli]
		public static VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, VkDisplayEventInfoEXT* displayEventInfo, VkAllocationCallbacks* allocator, VkFence* fence)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetSwapchainCounterEXT_ptr;
		[Calli]
		public static VkResult vkGetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagsEXT counter, ulong* counterValue)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetRefreshCycleDurationGOOGLE_ptr;
		[Calli]
		public static VkResult vkGetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* displayTimingProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPastPresentationTimingGOOGLE_ptr;
		[Calli]
		public static VkResult vkGetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, uint* presentationTimingCount, VkPastPresentationTimingGOOGLE* presentationTimings)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetDiscardRectangleEXT_ptr;
		[Calli]
		public static void vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, VkRect2D* discardRectangles)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkSetHdrMetadataEXT_ptr;
		[Calli]
		public static void vkSetHdrMetadataEXT(VkDevice device, uint swapchainCount, VkSwapchainKHR* swapchains, VkHdrMetadataEXT* metadata)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkSetDebugUtilsObjectNameEXT_ptr;
		[Calli]
		public static VkResult vkSetDebugUtilsObjectNameEXT(VkDevice device, VkDebugUtilsObjectNameInfoEXT* nameInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkSetDebugUtilsObjectTagEXT_ptr;
		[Calli]
		public static VkResult vkSetDebugUtilsObjectTagEXT(VkDevice device, VkDebugUtilsObjectTagInfoEXT* tagInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkQueueBeginDebugUtilsLabelEXT_ptr;
		[Calli]
		public static void vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, VkDebugUtilsLabelEXT* labelInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkQueueEndDebugUtilsLabelEXT_ptr;
		[Calli]
		public static void vkQueueEndDebugUtilsLabelEXT(VkQueue queue)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkQueueInsertDebugUtilsLabelEXT_ptr;
		[Calli]
		public static void vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, VkDebugUtilsLabelEXT* labelInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBeginDebugUtilsLabelEXT_ptr;
		[Calli]
		public static void vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* labelInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdEndDebugUtilsLabelEXT_ptr;
		[Calli]
		public static void vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdInsertDebugUtilsLabelEXT_ptr;
		[Calli]
		public static void vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* labelInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateDebugUtilsMessengerEXT_ptr;
		[Calli]
		public static VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, out VkDebugUtilsMessengerEXT messenger)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyDebugUtilsMessengerEXT_ptr;
		[Calli]
		public static void vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkSubmitDebugUtilsMessageEXT_ptr;
		[Calli]
		public static void vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, VkDebugUtilsMessengerCallbackDataEXT* callbackData)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetSampleLocationsEXT_ptr;
		[Calli]
		public static void vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, VkSampleLocationsInfoEXT* sampleLocationsInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceMultisamplePropertiesEXT_ptr;
		[Calli]
		public static void vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlags samples, VkMultisamplePropertiesEXT* multisampleProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetImageDrmFormatModifierPropertiesEXT_ptr;
		[Calli]
		public static VkResult vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateValidationCacheEXT_ptr;
		[Calli]
		public static VkResult vkCreateValidationCacheEXT(VkDevice device, VkValidationCacheCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, VkValidationCacheEXT* validationCache)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyValidationCacheEXT_ptr;
		[Calli]
		public static void vkDestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkMergeValidationCachesEXT_ptr;
		[Calli]
		public static VkResult vkMergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT dstCache, uint srcCacheCount, VkValidationCacheEXT* srcCaches)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetValidationCacheDataEXT_ptr;
		[Calli]
		public static VkResult vkGetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, VkPointerSize* dataSize, void* data)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBindShadingRateImageNV_ptr;
		[Calli]
		public static void vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetViewportShadingRatePaletteNV_ptr;
		[Calli]
		public static void vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkShadingRatePaletteNV* shadingRatePalettes)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetCoarseSampleOrderNV_ptr;
		[Calli]
		public static void vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint customSampleOrderCount, VkCoarseSampleOrderCustomNV* customSampleOrders)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateAccelerationStructureNV_ptr;
		[Calli]
		public static VkResult vkCreateAccelerationStructureNV(VkDevice device, VkAccelerationStructureCreateInfoNV* createInfo, VkAllocationCallbacks* allocator, VkAccelerationStructureKHR* accelerationStructure)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyAccelerationStructureKHR_ptr;
		[Calli]
		public static void vkDestroyAccelerationStructureKHR(VkDevice device, VkAccelerationStructureKHR accelerationStructure, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyAccelerationStructureNV_ptr;
		[Calli]
		public static void vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureKHR accelerationStructure, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetAccelerationStructureMemoryRequirementsNV_ptr;
		[Calli]
		public static void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, VkAccelerationStructureMemoryRequirementsInfoNV* info, VkMemoryRequirements2* memoryRequirements)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkBindAccelerationStructureMemoryKHR_ptr;
		[Calli]
		public static VkResult vkBindAccelerationStructureMemoryKHR(VkDevice device, uint bindInfoCount, VkBindAccelerationStructureMemoryInfoKHR* bindInfos)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkBindAccelerationStructureMemoryNV_ptr;
		[Calli]
		public static VkResult vkBindAccelerationStructureMemoryNV(VkDevice device, uint bindInfoCount, VkBindAccelerationStructureMemoryInfoKHR* bindInfos)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBuildAccelerationStructureNV_ptr;
		[Calli]
		public static void vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureInfoNV* info, VkBuffer instanceData, ulong instanceOffset, VkBool32 update, VkAccelerationStructureKHR dst, VkAccelerationStructureKHR src, VkBuffer scratch, ulong scratchOffset)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdCopyAccelerationStructureNV_ptr;
		[Calli]
		public static void vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureKHR dst, VkAccelerationStructureKHR src, VkCopyAccelerationStructureModeKHR mode)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdTraceRaysNV_ptr;
		[Calli]
		public static void vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, ulong raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, ulong missShaderBindingOffset, ulong missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, ulong hitShaderBindingOffset, ulong hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, ulong callableShaderBindingOffset, ulong callableShaderBindingStride, uint width, uint height, uint depth)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateRayTracingPipelinesNV_ptr;
		[Calli]
		public static VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfoNV* createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetRayTracingShaderGroupHandlesKHR_ptr;
		[Calli]
		public static VkResult vkGetRayTracingShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint firstGroup, uint groupCount, VkPointerSize dataSize, void* data)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetRayTracingShaderGroupHandlesNV_ptr;
		[Calli]
		public static VkResult vkGetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint firstGroup, uint groupCount, VkPointerSize dataSize, void* data)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetAccelerationStructureHandleNV_ptr;
		[Calli]
		public static VkResult vkGetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureKHR accelerationStructure, VkPointerSize dataSize, void* data)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdWriteAccelerationStructuresPropertiesKHR_ptr;
		[Calli]
		public static void vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint accelerationStructureCount, VkAccelerationStructureKHR* accelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdWriteAccelerationStructuresPropertiesNV_ptr;
		[Calli]
		public static void vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint accelerationStructureCount, VkAccelerationStructureKHR* accelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCompileDeferredNV_ptr;
		[Calli]
		public static VkResult vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint shader)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetMemoryHostPointerPropertiesEXT_ptr;
		[Calli]
		public static VkResult vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlags handleType, void* hostPointer, VkMemoryHostPointerPropertiesEXT* memoryHostPointerProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdWriteBufferMarkerAMD_ptr;
		[Calli]
		public static void vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkBuffer dstBuffer, ulong dstOffset, uint marker)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceCalibrateableTimeDomainsEXT_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint* timeDomainCount, VkTimeDomainEXT* timeDomains)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetCalibratedTimestampsEXT_ptr;
		[Calli]
		public static VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint timestampCount, VkCalibratedTimestampInfoEXT* timestampInfos, ulong* timestamps, ulong* maxDeviation)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDrawMeshTasksNV_ptr;
		[Calli]
		public static void vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint taskCount, uint firstTask)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDrawMeshTasksIndirectNV_ptr;
		[Calli]
		public static void vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, uint drawCount, uint stride)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdDrawMeshTasksIndirectCountNV_ptr;
		[Calli]
		public static void vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, ulong offset, VkBuffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetExclusiveScissorNV_ptr;
		[Calli]
		public static void vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, VkRect2D* exclusiveScissors)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetCheckpointNV_ptr;
		[Calli]
		public static void vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, void* checkpointMarker)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetQueueCheckpointDataNV_ptr;
		[Calli]
		public static void vkGetQueueCheckpointDataNV(VkQueue queue, uint* checkpointDataCount, VkCheckpointDataNV* checkpointData)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkInitializePerformanceApiINTEL_ptr;
		[Calli]
		public static VkResult vkInitializePerformanceApiINTEL(VkDevice device, VkInitializePerformanceApiInfoINTEL* initializeInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkUninitializePerformanceApiINTEL_ptr;
		[Calli]
		public static void vkUninitializePerformanceApiINTEL(VkDevice device)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetPerformanceMarkerINTEL_ptr;
		[Calli]
		public static VkResult vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, VkPerformanceMarkerInfoINTEL* markerInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetPerformanceStreamMarkerINTEL_ptr;
		[Calli]
		public static VkResult vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, VkPerformanceStreamMarkerInfoINTEL* markerInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetPerformanceOverrideINTEL_ptr;
		[Calli]
		public static VkResult vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, VkPerformanceOverrideInfoINTEL* overrideInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkAcquirePerformanceConfigurationINTEL_ptr;
		[Calli]
		public static VkResult vkAcquirePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationAcquireInfoINTEL* acquireInfo, VkPerformanceConfigurationINTEL* configuration)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkReleasePerformanceConfigurationINTEL_ptr;
		[Calli]
		public static VkResult vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkQueueSetPerformanceConfigurationINTEL_ptr;
		[Calli]
		public static VkResult vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPerformanceParameterINTEL_ptr;
		[Calli]
		public static VkResult vkGetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* value)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkSetLocalDimmingAMD_ptr;
		[Calli]
		public static void vkSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetBufferDeviceAddressEXT_ptr;
		[Calli]
		public static IntPtr vkGetBufferDeviceAddressEXT(VkDevice device, VkBufferDeviceAddressInfo* info)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceToolPropertiesEXT_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint* toolCount, VkPhysicalDeviceToolPropertiesEXT* toolProperties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceCooperativeMatrixPropertiesNV_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint* propertyCount, VkCooperativeMatrixPropertiesNV* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV_ptr;
		[Calli]
		public static VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint* combinationCount, VkFramebufferMixedSamplesCombinationNV* combinations)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateHeadlessSurfaceEXT_ptr;
		[Calli]
		public static VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, VkHeadlessSurfaceCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetLineStippleEXT_ptr;
		[Calli]
		public static void vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint lineStippleFactor, ushort lineStipplePattern)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkResetQueryPoolEXT_ptr;
		[Calli]
		public static void vkResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetCullModeEXT_ptr;
		[Calli]
		public static void vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetFrontFaceEXT_ptr;
		[Calli]
		public static void vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetPrimitiveTopologyEXT_ptr;
		[Calli]
		public static void vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetViewportWithCountEXT_ptr;
		[Calli]
		public static void vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint viewportCount, VkViewport* viewports)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetScissorWithCountEXT_ptr;
		[Calli]
		public static void vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint scissorCount, VkRect2D* scissors)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBindVertexBuffers2EXT_ptr;
		[Calli]
		public static void vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* buffers, ulong* offsets, ulong* sizes, ulong* strides)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetDepthTestEnableEXT_ptr;
		[Calli]
		public static void vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetDepthWriteEnableEXT_ptr;
		[Calli]
		public static void vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetDepthCompareOpEXT_ptr;
		[Calli]
		public static void vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetDepthBoundsTestEnableEXT_ptr;
		[Calli]
		public static void vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetStencilTestEnableEXT_ptr;
		[Calli]
		public static void vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdSetStencilOpEXT_ptr;
		[Calli]
		public static void vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetGeneratedCommandsMemoryRequirementsNV_ptr;
		[Calli]
		public static void vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice device, VkGeneratedCommandsMemoryRequirementsInfoNV* info, VkMemoryRequirements2* memoryRequirements)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdPreprocessGeneratedCommandsNV_ptr;
		[Calli]
		public static void vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkGeneratedCommandsInfoNV* generatedCommandsInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdExecuteGeneratedCommandsNV_ptr;
		[Calli]
		public static void vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, VkGeneratedCommandsInfoNV* generatedCommandsInfo)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBindPipelineShaderGroupNV_ptr;
		[Calli]
		public static void vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint groupIndex)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateIndirectCommandsLayoutNV_ptr;
		[Calli]
		public static VkResult vkCreateIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutCreateInfoNV* createInfo, VkAllocationCallbacks* allocator, VkIndirectCommandsLayoutNV* indirectCommandsLayout)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyIndirectCommandsLayoutNV_ptr;
		[Calli]
		public static void vkDestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreatePrivateDataSlotEXT_ptr;
		[Calli]
		public static VkResult vkCreatePrivateDataSlotEXT(VkDevice device, VkPrivateDataSlotCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, VkPrivateDataSlotEXT* privateDataSlot)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyPrivateDataSlotEXT_ptr;
		[Calli]
		public static void vkDestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlotEXT privateDataSlot, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkSetPrivateDataEXT_ptr;
		[Calli]
		public static VkResult vkSetPrivateDataEXT(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlotEXT privateDataSlot, ulong data)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetPrivateDataEXT_ptr;
		[Calli]
		public static void vkGetPrivateDataEXT(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlotEXT privateDataSlot, ulong* data)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateAndroidSurfaceKHR_ptr;
		[Calli]
		public static VkResult vkCreateAndroidSurfaceKHR(VkInstance instance, VkAndroidSurfaceCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, out VkSurfaceKHR surface)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetAndroidHardwareBufferPropertiesANDROID_ptr;
		[Calli]
		public static VkResult vkGetAndroidHardwareBufferPropertiesANDROID(VkDevice device, IntPtr* buffer, VkAndroidHardwareBufferPropertiesANDROID* properties)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetMemoryAndroidHardwareBufferANDROID_ptr;
		[Calli]
		public static VkResult vkGetMemoryAndroidHardwareBufferANDROID(VkDevice device, VkMemoryGetAndroidHardwareBufferInfoANDROID* info, IntPtr* buffer)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateIOSSurfaceMVK_ptr;
		[Calli]
		public static VkResult vkCreateIOSSurfaceMVK(VkInstance instance, VkIOSSurfaceCreateInfoMVK* createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateMacOSSurfaceMVK_ptr;
		[Calli]
		public static VkResult vkCreateMacOSSurfaceMVK(VkInstance instance, VkMacOSSurfaceCreateInfoMVK* createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateMetalSurfaceEXT_ptr;
		[Calli]
		public static VkResult vkCreateMetalSurfaceEXT(VkInstance instance, VkMetalSurfaceCreateInfoEXT* createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateViSurfaceNN_ptr;
		[Calli]
		public static VkResult vkCreateViSurfaceNN(VkInstance instance, VkViSurfaceCreateInfoNN* createInfo, VkAllocationCallbacks* allocator, VkSurfaceKHR* surface)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateDeferredOperationKHR_ptr;
		[Calli]
		public static VkResult vkCreateDeferredOperationKHR(VkDevice device, VkAllocationCallbacks* allocator, VkDeferredOperationKHR* deferredOperation)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDestroyDeferredOperationKHR_ptr;
		[Calli]
		public static void vkDestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation, VkAllocationCallbacks* allocator)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDeferredOperationMaxConcurrencyKHR_ptr;
		[Calli]
		public static uint vkGetDeferredOperationMaxConcurrencyKHR(VkDevice device, VkDeferredOperationKHR operation)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDeferredOperationResultKHR_ptr;
		[Calli]
		public static VkResult vkGetDeferredOperationResultKHR(VkDevice device, VkDeferredOperationKHR operation)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkDeferredOperationJoinKHR_ptr;
		[Calli]
		public static VkResult vkDeferredOperationJoinKHR(VkDevice device, VkDeferredOperationKHR operation)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateAccelerationStructureKHR_ptr;
		[Calli]
		public static VkResult vkCreateAccelerationStructureKHR(VkDevice device, VkAccelerationStructureCreateInfoKHR* createInfo, VkAllocationCallbacks* allocator, VkAccelerationStructureKHR* accelerationStructure)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetAccelerationStructureMemoryRequirementsKHR_ptr;
		[Calli]
		public static void vkGetAccelerationStructureMemoryRequirementsKHR(VkDevice device, VkAccelerationStructureMemoryRequirementsInfoKHR* info, VkMemoryRequirements2* memoryRequirements)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBuildAccelerationStructureKHR_ptr;
		[Calli]
		public static void vkCmdBuildAccelerationStructureKHR(VkCommandBuffer commandBuffer, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR* infos, VkAccelerationStructureBuildOffsetInfoKHR** ppOffsetInfos)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdBuildAccelerationStructureIndirectKHR_ptr;
		[Calli]
		public static void vkCmdBuildAccelerationStructureIndirectKHR(VkCommandBuffer commandBuffer, VkAccelerationStructureBuildGeometryInfoKHR* info, VkBuffer indirectBuffer, ulong indirectOffset, uint indirectStride)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkBuildAccelerationStructureKHR_ptr;
		[Calli]
		public static VkResult vkBuildAccelerationStructureKHR(VkDevice device, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR* infos, VkAccelerationStructureBuildOffsetInfoKHR** ppOffsetInfos)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCopyAccelerationStructureKHR_ptr;
		[Calli]
		public static VkResult vkCopyAccelerationStructureKHR(VkDevice device, VkCopyAccelerationStructureInfoKHR* info)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCopyAccelerationStructureToMemoryKHR_ptr;
		[Calli]
		public static VkResult vkCopyAccelerationStructureToMemoryKHR(VkDevice device, VkCopyAccelerationStructureToMemoryInfoKHR* info)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCopyMemoryToAccelerationStructureKHR_ptr;
		[Calli]
		public static VkResult vkCopyMemoryToAccelerationStructureKHR(VkDevice device, VkCopyMemoryToAccelerationStructureInfoKHR* info)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkWriteAccelerationStructuresPropertiesKHR_ptr;
		[Calli]
		public static VkResult vkWriteAccelerationStructuresPropertiesKHR(VkDevice device, uint accelerationStructureCount, VkAccelerationStructureKHR* accelerationStructures, VkQueryType queryType, VkPointerSize dataSize, void* data, VkPointerSize stride)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdCopyAccelerationStructureKHR_ptr;
		[Calli]
		public static void vkCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, VkCopyAccelerationStructureInfoKHR* info)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdCopyAccelerationStructureToMemoryKHR_ptr;
		[Calli]
		public static void vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR* info)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdCopyMemoryToAccelerationStructureKHR_ptr;
		[Calli]
		public static void vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR* info)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdTraceRaysKHR_ptr;
		[Calli]
		public static void vkCmdTraceRaysKHR(VkCommandBuffer commandBuffer, VkStridedBufferRegionKHR* raygenShaderBindingTable, VkStridedBufferRegionKHR* missShaderBindingTable, VkStridedBufferRegionKHR* hitShaderBindingTable, VkStridedBufferRegionKHR* callableShaderBindingTable, uint width, uint height, uint depth)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCreateRayTracingPipelinesKHR_ptr;
		[Calli]
		public static VkResult vkCreateRayTracingPipelinesKHR(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfoKHR* createInfos, VkAllocationCallbacks* allocator, VkPipeline* pipelines)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetAccelerationStructureDeviceAddressKHR_ptr;
		[Calli]
		public static IntPtr vkGetAccelerationStructureDeviceAddressKHR(VkDevice device, VkAccelerationStructureDeviceAddressInfoKHR* info)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetRayTracingCaptureReplayShaderGroupHandlesKHR_ptr;
		[Calli]
		public static VkResult vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint firstGroup, uint groupCount, VkPointerSize dataSize, void* data)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkCmdTraceRaysIndirectKHR_ptr;
		[Calli]
		public static void vkCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, VkStridedBufferRegionKHR* raygenShaderBindingTable, VkStridedBufferRegionKHR* missShaderBindingTable, VkStridedBufferRegionKHR* hitShaderBindingTable, VkStridedBufferRegionKHR* callableShaderBindingTable, VkBuffer buffer, ulong offset)
		{
			throw new NotImplementedException();
		}

		private static IntPtr vkGetDeviceAccelerationStructureCompatibilityKHR_ptr;
		[Calli]
		public static VkResult vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice device, VkAccelerationStructureVersionKHR* version)
		{
			throw new NotImplementedException();
		}

		private static void GenLoadInstance(IntPtr context, LoadFunction load)
		{
			vkDestroyInstance_ptr = load(context, "vkDestroyInstance");
			vkEnumeratePhysicalDevices_ptr = load(context, "vkEnumeratePhysicalDevices");
			vkGetPhysicalDeviceFeatures_ptr = load(context, "vkGetPhysicalDeviceFeatures");
			vkGetPhysicalDeviceFormatProperties_ptr = load(context, "vkGetPhysicalDeviceFormatProperties");
			vkGetPhysicalDeviceImageFormatProperties_ptr = load(context, "vkGetPhysicalDeviceImageFormatProperties");
			vkGetPhysicalDeviceProperties_ptr = load(context, "vkGetPhysicalDeviceProperties");
			vkGetPhysicalDeviceQueueFamilyProperties_ptr = load(context, "vkGetPhysicalDeviceQueueFamilyProperties");
			vkGetPhysicalDeviceMemoryProperties_ptr = load(context, "vkGetPhysicalDeviceMemoryProperties");
			vkGetInstanceProcAddr_ptr = load(context, "vkGetInstanceProcAddr");
			vkGetDeviceProcAddr_ptr = load(context, "vkGetDeviceProcAddr");
			vkCreateDevice_ptr = load(context, "vkCreateDevice");
			vkEnumerateDeviceExtensionProperties_ptr = load(context, "vkEnumerateDeviceExtensionProperties");
			vkEnumerateDeviceLayerProperties_ptr = load(context, "vkEnumerateDeviceLayerProperties");
			vkGetPhysicalDeviceSparseImageFormatProperties_ptr = load(context, "vkGetPhysicalDeviceSparseImageFormatProperties");
			vkEnumeratePhysicalDeviceGroups_ptr = load(context, "vkEnumeratePhysicalDeviceGroups");
			vkGetPhysicalDeviceFeatures2_ptr = load(context, "vkGetPhysicalDeviceFeatures2");
			vkGetPhysicalDeviceProperties2_ptr = load(context, "vkGetPhysicalDeviceProperties2");
			vkGetPhysicalDeviceFormatProperties2_ptr = load(context, "vkGetPhysicalDeviceFormatProperties2");
			vkGetPhysicalDeviceImageFormatProperties2_ptr = load(context, "vkGetPhysicalDeviceImageFormatProperties2");
			vkGetPhysicalDeviceQueueFamilyProperties2_ptr = load(context, "vkGetPhysicalDeviceQueueFamilyProperties2");
			vkGetPhysicalDeviceMemoryProperties2_ptr = load(context, "vkGetPhysicalDeviceMemoryProperties2");
			vkGetPhysicalDeviceSparseImageFormatProperties2_ptr = load(context, "vkGetPhysicalDeviceSparseImageFormatProperties2");
			vkGetPhysicalDeviceExternalBufferProperties_ptr = load(context, "vkGetPhysicalDeviceExternalBufferProperties");
			vkGetPhysicalDeviceExternalFenceProperties_ptr = load(context, "vkGetPhysicalDeviceExternalFenceProperties");
			vkGetPhysicalDeviceExternalSemaphoreProperties_ptr = load(context, "vkGetPhysicalDeviceExternalSemaphoreProperties");
			vkDestroySurfaceKHR_ptr = load(context, "vkDestroySurfaceKHR");
			vkGetPhysicalDeviceSurfaceSupportKHR_ptr = load(context, "vkGetPhysicalDeviceSurfaceSupportKHR");
			vkGetPhysicalDeviceSurfaceCapabilitiesKHR_ptr = load(context, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
			vkGetPhysicalDeviceSurfaceFormatsKHR_ptr = load(context, "vkGetPhysicalDeviceSurfaceFormatsKHR");
			vkGetPhysicalDeviceSurfacePresentModesKHR_ptr = load(context, "vkGetPhysicalDeviceSurfacePresentModesKHR");
			vkGetPhysicalDevicePresentRectanglesKHR_ptr = load(context, "vkGetPhysicalDevicePresentRectanglesKHR");
			vkGetPhysicalDeviceDisplayPropertiesKHR_ptr = load(context, "vkGetPhysicalDeviceDisplayPropertiesKHR");
			vkGetPhysicalDeviceDisplayPlanePropertiesKHR_ptr = load(context, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
			vkGetDisplayPlaneSupportedDisplaysKHR_ptr = load(context, "vkGetDisplayPlaneSupportedDisplaysKHR");
			vkGetDisplayModePropertiesKHR_ptr = load(context, "vkGetDisplayModePropertiesKHR");
			vkCreateDisplayModeKHR_ptr = load(context, "vkCreateDisplayModeKHR");
			vkGetDisplayPlaneCapabilitiesKHR_ptr = load(context, "vkGetDisplayPlaneCapabilitiesKHR");
			vkCreateDisplayPlaneSurfaceKHR_ptr = load(context, "vkCreateDisplayPlaneSurfaceKHR");
			vkGetPhysicalDeviceFeatures2KHR_ptr = load(context, "vkGetPhysicalDeviceFeatures2KHR");
			vkGetPhysicalDeviceProperties2KHR_ptr = load(context, "vkGetPhysicalDeviceProperties2KHR");
			vkGetPhysicalDeviceFormatProperties2KHR_ptr = load(context, "vkGetPhysicalDeviceFormatProperties2KHR");
			vkGetPhysicalDeviceImageFormatProperties2KHR_ptr = load(context, "vkGetPhysicalDeviceImageFormatProperties2KHR");
			vkGetPhysicalDeviceQueueFamilyProperties2KHR_ptr = load(context, "vkGetPhysicalDeviceQueueFamilyProperties2KHR");
			vkGetPhysicalDeviceMemoryProperties2KHR_ptr = load(context, "vkGetPhysicalDeviceMemoryProperties2KHR");
			vkGetPhysicalDeviceSparseImageFormatProperties2KHR_ptr = load(context, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
			vkEnumeratePhysicalDeviceGroupsKHR_ptr = load(context, "vkEnumeratePhysicalDeviceGroupsKHR");
			vkGetPhysicalDeviceExternalBufferPropertiesKHR_ptr = load(context, "vkGetPhysicalDeviceExternalBufferPropertiesKHR");
			vkGetPhysicalDeviceExternalSemaphorePropertiesKHR_ptr = load(context, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
			vkGetPhysicalDeviceExternalFencePropertiesKHR_ptr = load(context, "vkGetPhysicalDeviceExternalFencePropertiesKHR");
			vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR_ptr = load(context, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
			vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR_ptr = load(context, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
			vkGetPhysicalDeviceSurfaceCapabilities2KHR_ptr = load(context, "vkGetPhysicalDeviceSurfaceCapabilities2KHR");
			vkGetPhysicalDeviceSurfaceFormats2KHR_ptr = load(context, "vkGetPhysicalDeviceSurfaceFormats2KHR");
			vkGetPhysicalDeviceDisplayProperties2KHR_ptr = load(context, "vkGetPhysicalDeviceDisplayProperties2KHR");
			vkGetPhysicalDeviceDisplayPlaneProperties2KHR_ptr = load(context, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
			vkGetDisplayModeProperties2KHR_ptr = load(context, "vkGetDisplayModeProperties2KHR");
			vkGetDisplayPlaneCapabilities2KHR_ptr = load(context, "vkGetDisplayPlaneCapabilities2KHR");
			vkGetPhysicalDeviceFragmentShadingRatesKHR_ptr = load(context, "vkGetPhysicalDeviceFragmentShadingRatesKHR");
			vkCreateDebugReportCallbackEXT_ptr = load(context, "vkCreateDebugReportCallbackEXT");
			vkDestroyDebugReportCallbackEXT_ptr = load(context, "vkDestroyDebugReportCallbackEXT");
			vkDebugReportMessageEXT_ptr = load(context, "vkDebugReportMessageEXT");
			vkGetPhysicalDeviceExternalImageFormatPropertiesNV_ptr = load(context, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
			vkReleaseDisplayEXT_ptr = load(context, "vkReleaseDisplayEXT");
			vkGetPhysicalDeviceSurfaceCapabilities2EXT_ptr = load(context, "vkGetPhysicalDeviceSurfaceCapabilities2EXT");
			vkSetDebugUtilsObjectNameEXT_ptr = load(context, "vkSetDebugUtilsObjectNameEXT");
			vkSetDebugUtilsObjectTagEXT_ptr = load(context, "vkSetDebugUtilsObjectTagEXT");
			vkQueueBeginDebugUtilsLabelEXT_ptr = load(context, "vkQueueBeginDebugUtilsLabelEXT");
			vkQueueEndDebugUtilsLabelEXT_ptr = load(context, "vkQueueEndDebugUtilsLabelEXT");
			vkQueueInsertDebugUtilsLabelEXT_ptr = load(context, "vkQueueInsertDebugUtilsLabelEXT");
			vkCmdBeginDebugUtilsLabelEXT_ptr = load(context, "vkCmdBeginDebugUtilsLabelEXT");
			vkCmdEndDebugUtilsLabelEXT_ptr = load(context, "vkCmdEndDebugUtilsLabelEXT");
			vkCmdInsertDebugUtilsLabelEXT_ptr = load(context, "vkCmdInsertDebugUtilsLabelEXT");
			vkCreateDebugUtilsMessengerEXT_ptr = load(context, "vkCreateDebugUtilsMessengerEXT");
			vkDestroyDebugUtilsMessengerEXT_ptr = load(context, "vkDestroyDebugUtilsMessengerEXT");
			vkSubmitDebugUtilsMessageEXT_ptr = load(context, "vkSubmitDebugUtilsMessageEXT");
			vkGetPhysicalDeviceMultisamplePropertiesEXT_ptr = load(context, "vkGetPhysicalDeviceMultisamplePropertiesEXT");
			vkGetPhysicalDeviceCalibrateableTimeDomainsEXT_ptr = load(context, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
			vkGetPhysicalDeviceToolPropertiesEXT_ptr = load(context, "vkGetPhysicalDeviceToolPropertiesEXT");
			vkGetPhysicalDeviceCooperativeMatrixPropertiesNV_ptr = load(context, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
			vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV_ptr = load(context, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
			vkCreateHeadlessSurfaceEXT_ptr = load(context, "vkCreateHeadlessSurfaceEXT");
			vkCreateAndroidSurfaceKHR_ptr = load(context, "vkCreateAndroidSurfaceKHR");
			vkCreateIOSSurfaceMVK_ptr = load(context, "vkCreateIOSSurfaceMVK");
			vkCreateMacOSSurfaceMVK_ptr = load(context, "vkCreateMacOSSurfaceMVK");
			vkCreateMetalSurfaceEXT_ptr = load(context, "vkCreateMetalSurfaceEXT");
			vkCreateViSurfaceNN_ptr = load(context, "vkCreateViSurfaceNN");
		}
		private static void GenLoadDevice(IntPtr context, LoadFunction load)
		{
			vkDestroyDevice_ptr = load(context, "vkDestroyDevice");
			vkGetDeviceQueue_ptr = load(context, "vkGetDeviceQueue");
			vkQueueSubmit_ptr = load(context, "vkQueueSubmit");
			vkQueueWaitIdle_ptr = load(context, "vkQueueWaitIdle");
			vkDeviceWaitIdle_ptr = load(context, "vkDeviceWaitIdle");
			vkAllocateMemory_ptr = load(context, "vkAllocateMemory");
			vkFreeMemory_ptr = load(context, "vkFreeMemory");
			vkMapMemory_ptr = load(context, "vkMapMemory");
			vkUnmapMemory_ptr = load(context, "vkUnmapMemory");
			vkFlushMappedMemoryRanges_ptr = load(context, "vkFlushMappedMemoryRanges");
			vkInvalidateMappedMemoryRanges_ptr = load(context, "vkInvalidateMappedMemoryRanges");
			vkGetDeviceMemoryCommitment_ptr = load(context, "vkGetDeviceMemoryCommitment");
			vkBindBufferMemory_ptr = load(context, "vkBindBufferMemory");
			vkBindImageMemory_ptr = load(context, "vkBindImageMemory");
			vkGetBufferMemoryRequirements_ptr = load(context, "vkGetBufferMemoryRequirements");
			vkGetImageMemoryRequirements_ptr = load(context, "vkGetImageMemoryRequirements");
			vkGetImageSparseMemoryRequirements_ptr = load(context, "vkGetImageSparseMemoryRequirements");
			vkQueueBindSparse_ptr = load(context, "vkQueueBindSparse");
			vkCreateFence_ptr = load(context, "vkCreateFence");
			vkDestroyFence_ptr = load(context, "vkDestroyFence");
			vkResetFences_ptr = load(context, "vkResetFences");
			vkGetFenceStatus_ptr = load(context, "vkGetFenceStatus");
			vkWaitForFences_ptr = load(context, "vkWaitForFences");
			vkCreateSemaphore_ptr = load(context, "vkCreateSemaphore");
			vkDestroySemaphore_ptr = load(context, "vkDestroySemaphore");
			vkCreateEvent_ptr = load(context, "vkCreateEvent");
			vkDestroyEvent_ptr = load(context, "vkDestroyEvent");
			vkGetEventStatus_ptr = load(context, "vkGetEventStatus");
			vkSetEvent_ptr = load(context, "vkSetEvent");
			vkResetEvent_ptr = load(context, "vkResetEvent");
			vkCreateQueryPool_ptr = load(context, "vkCreateQueryPool");
			vkDestroyQueryPool_ptr = load(context, "vkDestroyQueryPool");
			vkGetQueryPoolResults_ptr = load(context, "vkGetQueryPoolResults");
			vkCreateBuffer_ptr = load(context, "vkCreateBuffer");
			vkDestroyBuffer_ptr = load(context, "vkDestroyBuffer");
			vkCreateBufferView_ptr = load(context, "vkCreateBufferView");
			vkDestroyBufferView_ptr = load(context, "vkDestroyBufferView");
			vkCreateImage_ptr = load(context, "vkCreateImage");
			vkDestroyImage_ptr = load(context, "vkDestroyImage");
			vkGetImageSubresourceLayout_ptr = load(context, "vkGetImageSubresourceLayout");
			vkCreateImageView_ptr = load(context, "vkCreateImageView");
			vkDestroyImageView_ptr = load(context, "vkDestroyImageView");
			vkCreateShaderModule_ptr = load(context, "vkCreateShaderModule");
			vkDestroyShaderModule_ptr = load(context, "vkDestroyShaderModule");
			vkCreatePipelineCache_ptr = load(context, "vkCreatePipelineCache");
			vkDestroyPipelineCache_ptr = load(context, "vkDestroyPipelineCache");
			vkGetPipelineCacheData_ptr = load(context, "vkGetPipelineCacheData");
			vkMergePipelineCaches_ptr = load(context, "vkMergePipelineCaches");
			vkCreateGraphicsPipelines_ptr = load(context, "vkCreateGraphicsPipelines");
			vkCreateComputePipelines_ptr = load(context, "vkCreateComputePipelines");
			vkDestroyPipeline_ptr = load(context, "vkDestroyPipeline");
			vkCreatePipelineLayout_ptr = load(context, "vkCreatePipelineLayout");
			vkDestroyPipelineLayout_ptr = load(context, "vkDestroyPipelineLayout");
			vkCreateSampler_ptr = load(context, "vkCreateSampler");
			vkDestroySampler_ptr = load(context, "vkDestroySampler");
			vkCreateDescriptorSetLayout_ptr = load(context, "vkCreateDescriptorSetLayout");
			vkDestroyDescriptorSetLayout_ptr = load(context, "vkDestroyDescriptorSetLayout");
			vkCreateDescriptorPool_ptr = load(context, "vkCreateDescriptorPool");
			vkDestroyDescriptorPool_ptr = load(context, "vkDestroyDescriptorPool");
			vkResetDescriptorPool_ptr = load(context, "vkResetDescriptorPool");
			vkAllocateDescriptorSets_ptr = load(context, "vkAllocateDescriptorSets");
			vkFreeDescriptorSets_ptr = load(context, "vkFreeDescriptorSets");
			vkUpdateDescriptorSets_ptr = load(context, "vkUpdateDescriptorSets");
			vkCreateFramebuffer_ptr = load(context, "vkCreateFramebuffer");
			vkDestroyFramebuffer_ptr = load(context, "vkDestroyFramebuffer");
			vkCreateRenderPass_ptr = load(context, "vkCreateRenderPass");
			vkDestroyRenderPass_ptr = load(context, "vkDestroyRenderPass");
			vkGetRenderAreaGranularity_ptr = load(context, "vkGetRenderAreaGranularity");
			vkCreateCommandPool_ptr = load(context, "vkCreateCommandPool");
			vkDestroyCommandPool_ptr = load(context, "vkDestroyCommandPool");
			vkResetCommandPool_ptr = load(context, "vkResetCommandPool");
			vkAllocateCommandBuffers_ptr = load(context, "vkAllocateCommandBuffers");
			vkFreeCommandBuffers_ptr = load(context, "vkFreeCommandBuffers");
			vkBeginCommandBuffer_ptr = load(context, "vkBeginCommandBuffer");
			vkEndCommandBuffer_ptr = load(context, "vkEndCommandBuffer");
			vkResetCommandBuffer_ptr = load(context, "vkResetCommandBuffer");
			vkCmdBindPipeline_ptr = load(context, "vkCmdBindPipeline");
			vkCmdSetViewport_ptr = load(context, "vkCmdSetViewport");
			vkCmdSetScissor_ptr = load(context, "vkCmdSetScissor");
			vkCmdSetLineWidth_ptr = load(context, "vkCmdSetLineWidth");
			vkCmdSetDepthBias_ptr = load(context, "vkCmdSetDepthBias");
			vkCmdSetBlendConstants_ptr = load(context, "vkCmdSetBlendConstants");
			vkCmdSetDepthBounds_ptr = load(context, "vkCmdSetDepthBounds");
			vkCmdSetStencilCompareMask_ptr = load(context, "vkCmdSetStencilCompareMask");
			vkCmdSetStencilWriteMask_ptr = load(context, "vkCmdSetStencilWriteMask");
			vkCmdSetStencilReference_ptr = load(context, "vkCmdSetStencilReference");
			vkCmdBindDescriptorSets_ptr = load(context, "vkCmdBindDescriptorSets");
			vkCmdBindIndexBuffer_ptr = load(context, "vkCmdBindIndexBuffer");
			vkCmdBindVertexBuffers_ptr = load(context, "vkCmdBindVertexBuffers");
			vkCmdDraw_ptr = load(context, "vkCmdDraw");
			vkCmdDrawIndexed_ptr = load(context, "vkCmdDrawIndexed");
			vkCmdDrawIndirect_ptr = load(context, "vkCmdDrawIndirect");
			vkCmdDrawIndexedIndirect_ptr = load(context, "vkCmdDrawIndexedIndirect");
			vkCmdDispatch_ptr = load(context, "vkCmdDispatch");
			vkCmdDispatchIndirect_ptr = load(context, "vkCmdDispatchIndirect");
			vkCmdCopyBuffer_ptr = load(context, "vkCmdCopyBuffer");
			vkCmdCopyImage_ptr = load(context, "vkCmdCopyImage");
			vkCmdBlitImage_ptr = load(context, "vkCmdBlitImage");
			vkCmdCopyBufferToImage_ptr = load(context, "vkCmdCopyBufferToImage");
			vkCmdCopyImageToBuffer_ptr = load(context, "vkCmdCopyImageToBuffer");
			vkCmdUpdateBuffer_ptr = load(context, "vkCmdUpdateBuffer");
			vkCmdFillBuffer_ptr = load(context, "vkCmdFillBuffer");
			vkCmdClearColorImage_ptr = load(context, "vkCmdClearColorImage");
			vkCmdClearDepthStencilImage_ptr = load(context, "vkCmdClearDepthStencilImage");
			vkCmdClearAttachments_ptr = load(context, "vkCmdClearAttachments");
			vkCmdResolveImage_ptr = load(context, "vkCmdResolveImage");
			vkCmdSetEvent_ptr = load(context, "vkCmdSetEvent");
			vkCmdResetEvent_ptr = load(context, "vkCmdResetEvent");
			vkCmdWaitEvents_ptr = load(context, "vkCmdWaitEvents");
			vkCmdPipelineBarrier_ptr = load(context, "vkCmdPipelineBarrier");
			vkCmdBeginQuery_ptr = load(context, "vkCmdBeginQuery");
			vkCmdEndQuery_ptr = load(context, "vkCmdEndQuery");
			vkCmdResetQueryPool_ptr = load(context, "vkCmdResetQueryPool");
			vkCmdWriteTimestamp_ptr = load(context, "vkCmdWriteTimestamp");
			vkCmdCopyQueryPoolResults_ptr = load(context, "vkCmdCopyQueryPoolResults");
			vkCmdPushConstants_ptr = load(context, "vkCmdPushConstants");
			vkCmdBeginRenderPass_ptr = load(context, "vkCmdBeginRenderPass");
			vkCmdNextSubpass_ptr = load(context, "vkCmdNextSubpass");
			vkCmdEndRenderPass_ptr = load(context, "vkCmdEndRenderPass");
			vkCmdExecuteCommands_ptr = load(context, "vkCmdExecuteCommands");
			vkBindBufferMemory2_ptr = load(context, "vkBindBufferMemory2");
			vkBindImageMemory2_ptr = load(context, "vkBindImageMemory2");
			vkGetDeviceGroupPeerMemoryFeatures_ptr = load(context, "vkGetDeviceGroupPeerMemoryFeatures");
			vkCmdSetDeviceMask_ptr = load(context, "vkCmdSetDeviceMask");
			vkCmdDispatchBase_ptr = load(context, "vkCmdDispatchBase");
			vkGetImageMemoryRequirements2_ptr = load(context, "vkGetImageMemoryRequirements2");
			vkGetBufferMemoryRequirements2_ptr = load(context, "vkGetBufferMemoryRequirements2");
			vkGetImageSparseMemoryRequirements2_ptr = load(context, "vkGetImageSparseMemoryRequirements2");
			vkTrimCommandPool_ptr = load(context, "vkTrimCommandPool");
			vkGetDeviceQueue2_ptr = load(context, "vkGetDeviceQueue2");
			vkCreateSamplerYcbcrConversion_ptr = load(context, "vkCreateSamplerYcbcrConversion");
			vkDestroySamplerYcbcrConversion_ptr = load(context, "vkDestroySamplerYcbcrConversion");
			vkCreateDescriptorUpdateTemplate_ptr = load(context, "vkCreateDescriptorUpdateTemplate");
			vkDestroyDescriptorUpdateTemplate_ptr = load(context, "vkDestroyDescriptorUpdateTemplate");
			vkUpdateDescriptorSetWithTemplate_ptr = load(context, "vkUpdateDescriptorSetWithTemplate");
			vkGetDescriptorSetLayoutSupport_ptr = load(context, "vkGetDescriptorSetLayoutSupport");
			vkCmdDrawIndirectCount_ptr = load(context, "vkCmdDrawIndirectCount");
			vkCmdDrawIndexedIndirectCount_ptr = load(context, "vkCmdDrawIndexedIndirectCount");
			vkCreateRenderPass2_ptr = load(context, "vkCreateRenderPass2");
			vkCmdBeginRenderPass2_ptr = load(context, "vkCmdBeginRenderPass2");
			vkCmdNextSubpass2_ptr = load(context, "vkCmdNextSubpass2");
			vkCmdEndRenderPass2_ptr = load(context, "vkCmdEndRenderPass2");
			vkResetQueryPool_ptr = load(context, "vkResetQueryPool");
			vkGetSemaphoreCounterValue_ptr = load(context, "vkGetSemaphoreCounterValue");
			vkWaitSemaphores_ptr = load(context, "vkWaitSemaphores");
			vkSignalSemaphore_ptr = load(context, "vkSignalSemaphore");
			vkGetBufferDeviceAddress_ptr = load(context, "vkGetBufferDeviceAddress");
			vkGetBufferOpaqueCaptureAddress_ptr = load(context, "vkGetBufferOpaqueCaptureAddress");
			vkGetDeviceMemoryOpaqueCaptureAddress_ptr = load(context, "vkGetDeviceMemoryOpaqueCaptureAddress");
			vkCreateSwapchainKHR_ptr = load(context, "vkCreateSwapchainKHR");
			vkDestroySwapchainKHR_ptr = load(context, "vkDestroySwapchainKHR");
			vkGetSwapchainImagesKHR_ptr = load(context, "vkGetSwapchainImagesKHR");
			vkAcquireNextImageKHR_ptr = load(context, "vkAcquireNextImageKHR");
			vkQueuePresentKHR_ptr = load(context, "vkQueuePresentKHR");
			vkGetDeviceGroupPresentCapabilitiesKHR_ptr = load(context, "vkGetDeviceGroupPresentCapabilitiesKHR");
			vkGetDeviceGroupSurfacePresentModesKHR_ptr = load(context, "vkGetDeviceGroupSurfacePresentModesKHR");
			vkAcquireNextImage2KHR_ptr = load(context, "vkAcquireNextImage2KHR");
			vkCreateSharedSwapchainsKHR_ptr = load(context, "vkCreateSharedSwapchainsKHR");
			vkGetDeviceGroupPeerMemoryFeaturesKHR_ptr = load(context, "vkGetDeviceGroupPeerMemoryFeaturesKHR");
			vkCmdSetDeviceMaskKHR_ptr = load(context, "vkCmdSetDeviceMaskKHR");
			vkCmdDispatchBaseKHR_ptr = load(context, "vkCmdDispatchBaseKHR");
			vkTrimCommandPoolKHR_ptr = load(context, "vkTrimCommandPoolKHR");
			vkGetMemoryFdKHR_ptr = load(context, "vkGetMemoryFdKHR");
			vkGetMemoryFdPropertiesKHR_ptr = load(context, "vkGetMemoryFdPropertiesKHR");
			vkImportSemaphoreFdKHR_ptr = load(context, "vkImportSemaphoreFdKHR");
			vkGetSemaphoreFdKHR_ptr = load(context, "vkGetSemaphoreFdKHR");
			vkCmdPushDescriptorSetKHR_ptr = load(context, "vkCmdPushDescriptorSetKHR");
			vkCmdPushDescriptorSetWithTemplateKHR_ptr = load(context, "vkCmdPushDescriptorSetWithTemplateKHR");
			vkCreateDescriptorUpdateTemplateKHR_ptr = load(context, "vkCreateDescriptorUpdateTemplateKHR");
			vkDestroyDescriptorUpdateTemplateKHR_ptr = load(context, "vkDestroyDescriptorUpdateTemplateKHR");
			vkUpdateDescriptorSetWithTemplateKHR_ptr = load(context, "vkUpdateDescriptorSetWithTemplateKHR");
			vkCreateRenderPass2KHR_ptr = load(context, "vkCreateRenderPass2KHR");
			vkCmdBeginRenderPass2KHR_ptr = load(context, "vkCmdBeginRenderPass2KHR");
			vkCmdNextSubpass2KHR_ptr = load(context, "vkCmdNextSubpass2KHR");
			vkCmdEndRenderPass2KHR_ptr = load(context, "vkCmdEndRenderPass2KHR");
			vkGetSwapchainStatusKHR_ptr = load(context, "vkGetSwapchainStatusKHR");
			vkImportFenceFdKHR_ptr = load(context, "vkImportFenceFdKHR");
			vkGetFenceFdKHR_ptr = load(context, "vkGetFenceFdKHR");
			vkAcquireProfilingLockKHR_ptr = load(context, "vkAcquireProfilingLockKHR");
			vkReleaseProfilingLockKHR_ptr = load(context, "vkReleaseProfilingLockKHR");
			vkGetImageMemoryRequirements2KHR_ptr = load(context, "vkGetImageMemoryRequirements2KHR");
			vkGetBufferMemoryRequirements2KHR_ptr = load(context, "vkGetBufferMemoryRequirements2KHR");
			vkGetImageSparseMemoryRequirements2KHR_ptr = load(context, "vkGetImageSparseMemoryRequirements2KHR");
			vkCreateSamplerYcbcrConversionKHR_ptr = load(context, "vkCreateSamplerYcbcrConversionKHR");
			vkDestroySamplerYcbcrConversionKHR_ptr = load(context, "vkDestroySamplerYcbcrConversionKHR");
			vkBindBufferMemory2KHR_ptr = load(context, "vkBindBufferMemory2KHR");
			vkBindImageMemory2KHR_ptr = load(context, "vkBindImageMemory2KHR");
			vkGetDescriptorSetLayoutSupportKHR_ptr = load(context, "vkGetDescriptorSetLayoutSupportKHR");
			vkCmdDrawIndirectCountKHR_ptr = load(context, "vkCmdDrawIndirectCountKHR");
			vkCmdDrawIndexedIndirectCountKHR_ptr = load(context, "vkCmdDrawIndexedIndirectCountKHR");
			vkGetSemaphoreCounterValueKHR_ptr = load(context, "vkGetSemaphoreCounterValueKHR");
			vkWaitSemaphoresKHR_ptr = load(context, "vkWaitSemaphoresKHR");
			vkSignalSemaphoreKHR_ptr = load(context, "vkSignalSemaphoreKHR");
			vkCmdSetFragmentShadingRateKHR_ptr = load(context, "vkCmdSetFragmentShadingRateKHR");
			vkGetBufferDeviceAddressKHR_ptr = load(context, "vkGetBufferDeviceAddressKHR");
			vkGetBufferOpaqueCaptureAddressKHR_ptr = load(context, "vkGetBufferOpaqueCaptureAddressKHR");
			vkGetDeviceMemoryOpaqueCaptureAddressKHR_ptr = load(context, "vkGetDeviceMemoryOpaqueCaptureAddressKHR");
			vkGetPipelineExecutablePropertiesKHR_ptr = load(context, "vkGetPipelineExecutablePropertiesKHR");
			vkGetPipelineExecutableStatisticsKHR_ptr = load(context, "vkGetPipelineExecutableStatisticsKHR");
			vkGetPipelineExecutableInternalRepresentationsKHR_ptr = load(context, "vkGetPipelineExecutableInternalRepresentationsKHR");
			vkCmdCopyBuffer2KHR_ptr = load(context, "vkCmdCopyBuffer2KHR");
			vkCmdCopyImage2KHR_ptr = load(context, "vkCmdCopyImage2KHR");
			vkCmdCopyBufferToImage2KHR_ptr = load(context, "vkCmdCopyBufferToImage2KHR");
			vkCmdCopyImageToBuffer2KHR_ptr = load(context, "vkCmdCopyImageToBuffer2KHR");
			vkCmdBlitImage2KHR_ptr = load(context, "vkCmdBlitImage2KHR");
			vkCmdResolveImage2KHR_ptr = load(context, "vkCmdResolveImage2KHR");
			vkDebugMarkerSetObjectTagEXT_ptr = load(context, "vkDebugMarkerSetObjectTagEXT");
			vkDebugMarkerSetObjectNameEXT_ptr = load(context, "vkDebugMarkerSetObjectNameEXT");
			vkCmdDebugMarkerBeginEXT_ptr = load(context, "vkCmdDebugMarkerBeginEXT");
			vkCmdDebugMarkerEndEXT_ptr = load(context, "vkCmdDebugMarkerEndEXT");
			vkCmdDebugMarkerInsertEXT_ptr = load(context, "vkCmdDebugMarkerInsertEXT");
			vkCmdBindTransformFeedbackBuffersEXT_ptr = load(context, "vkCmdBindTransformFeedbackBuffersEXT");
			vkCmdBeginTransformFeedbackEXT_ptr = load(context, "vkCmdBeginTransformFeedbackEXT");
			vkCmdEndTransformFeedbackEXT_ptr = load(context, "vkCmdEndTransformFeedbackEXT");
			vkCmdBeginQueryIndexedEXT_ptr = load(context, "vkCmdBeginQueryIndexedEXT");
			vkCmdEndQueryIndexedEXT_ptr = load(context, "vkCmdEndQueryIndexedEXT");
			vkCmdDrawIndirectByteCountEXT_ptr = load(context, "vkCmdDrawIndirectByteCountEXT");
			vkGetImageViewHandleNVX_ptr = load(context, "vkGetImageViewHandleNVX");
			vkGetImageViewAddressNVX_ptr = load(context, "vkGetImageViewAddressNVX");
			vkCmdDrawIndirectCountAMD_ptr = load(context, "vkCmdDrawIndirectCountAMD");
			vkCmdDrawIndexedIndirectCountAMD_ptr = load(context, "vkCmdDrawIndexedIndirectCountAMD");
			vkGetShaderInfoAMD_ptr = load(context, "vkGetShaderInfoAMD");
			vkCmdBeginConditionalRenderingEXT_ptr = load(context, "vkCmdBeginConditionalRenderingEXT");
			vkCmdEndConditionalRenderingEXT_ptr = load(context, "vkCmdEndConditionalRenderingEXT");
			vkCmdSetViewportWScalingNV_ptr = load(context, "vkCmdSetViewportWScalingNV");
			vkDisplayPowerControlEXT_ptr = load(context, "vkDisplayPowerControlEXT");
			vkRegisterDeviceEventEXT_ptr = load(context, "vkRegisterDeviceEventEXT");
			vkRegisterDisplayEventEXT_ptr = load(context, "vkRegisterDisplayEventEXT");
			vkGetSwapchainCounterEXT_ptr = load(context, "vkGetSwapchainCounterEXT");
			vkGetRefreshCycleDurationGOOGLE_ptr = load(context, "vkGetRefreshCycleDurationGOOGLE");
			vkGetPastPresentationTimingGOOGLE_ptr = load(context, "vkGetPastPresentationTimingGOOGLE");
			vkCmdSetDiscardRectangleEXT_ptr = load(context, "vkCmdSetDiscardRectangleEXT");
			vkSetHdrMetadataEXT_ptr = load(context, "vkSetHdrMetadataEXT");
			vkCmdSetSampleLocationsEXT_ptr = load(context, "vkCmdSetSampleLocationsEXT");
			vkGetImageDrmFormatModifierPropertiesEXT_ptr = load(context, "vkGetImageDrmFormatModifierPropertiesEXT");
			vkCreateValidationCacheEXT_ptr = load(context, "vkCreateValidationCacheEXT");
			vkDestroyValidationCacheEXT_ptr = load(context, "vkDestroyValidationCacheEXT");
			vkMergeValidationCachesEXT_ptr = load(context, "vkMergeValidationCachesEXT");
			vkGetValidationCacheDataEXT_ptr = load(context, "vkGetValidationCacheDataEXT");
			vkCmdBindShadingRateImageNV_ptr = load(context, "vkCmdBindShadingRateImageNV");
			vkCmdSetViewportShadingRatePaletteNV_ptr = load(context, "vkCmdSetViewportShadingRatePaletteNV");
			vkCmdSetCoarseSampleOrderNV_ptr = load(context, "vkCmdSetCoarseSampleOrderNV");
			vkCreateAccelerationStructureNV_ptr = load(context, "vkCreateAccelerationStructureNV");
			vkDestroyAccelerationStructureKHR_ptr = load(context, "vkDestroyAccelerationStructureKHR");
			vkDestroyAccelerationStructureNV_ptr = load(context, "vkDestroyAccelerationStructureNV");
			vkGetAccelerationStructureMemoryRequirementsNV_ptr = load(context, "vkGetAccelerationStructureMemoryRequirementsNV");
			vkBindAccelerationStructureMemoryKHR_ptr = load(context, "vkBindAccelerationStructureMemoryKHR");
			vkBindAccelerationStructureMemoryNV_ptr = load(context, "vkBindAccelerationStructureMemoryNV");
			vkCmdBuildAccelerationStructureNV_ptr = load(context, "vkCmdBuildAccelerationStructureNV");
			vkCmdCopyAccelerationStructureNV_ptr = load(context, "vkCmdCopyAccelerationStructureNV");
			vkCmdTraceRaysNV_ptr = load(context, "vkCmdTraceRaysNV");
			vkCreateRayTracingPipelinesNV_ptr = load(context, "vkCreateRayTracingPipelinesNV");
			vkGetRayTracingShaderGroupHandlesKHR_ptr = load(context, "vkGetRayTracingShaderGroupHandlesKHR");
			vkGetRayTracingShaderGroupHandlesNV_ptr = load(context, "vkGetRayTracingShaderGroupHandlesNV");
			vkGetAccelerationStructureHandleNV_ptr = load(context, "vkGetAccelerationStructureHandleNV");
			vkCmdWriteAccelerationStructuresPropertiesKHR_ptr = load(context, "vkCmdWriteAccelerationStructuresPropertiesKHR");
			vkCmdWriteAccelerationStructuresPropertiesNV_ptr = load(context, "vkCmdWriteAccelerationStructuresPropertiesNV");
			vkCompileDeferredNV_ptr = load(context, "vkCompileDeferredNV");
			vkGetMemoryHostPointerPropertiesEXT_ptr = load(context, "vkGetMemoryHostPointerPropertiesEXT");
			vkCmdWriteBufferMarkerAMD_ptr = load(context, "vkCmdWriteBufferMarkerAMD");
			vkGetCalibratedTimestampsEXT_ptr = load(context, "vkGetCalibratedTimestampsEXT");
			vkCmdDrawMeshTasksNV_ptr = load(context, "vkCmdDrawMeshTasksNV");
			vkCmdDrawMeshTasksIndirectNV_ptr = load(context, "vkCmdDrawMeshTasksIndirectNV");
			vkCmdDrawMeshTasksIndirectCountNV_ptr = load(context, "vkCmdDrawMeshTasksIndirectCountNV");
			vkCmdSetExclusiveScissorNV_ptr = load(context, "vkCmdSetExclusiveScissorNV");
			vkCmdSetCheckpointNV_ptr = load(context, "vkCmdSetCheckpointNV");
			vkGetQueueCheckpointDataNV_ptr = load(context, "vkGetQueueCheckpointDataNV");
			vkInitializePerformanceApiINTEL_ptr = load(context, "vkInitializePerformanceApiINTEL");
			vkUninitializePerformanceApiINTEL_ptr = load(context, "vkUninitializePerformanceApiINTEL");
			vkCmdSetPerformanceMarkerINTEL_ptr = load(context, "vkCmdSetPerformanceMarkerINTEL");
			vkCmdSetPerformanceStreamMarkerINTEL_ptr = load(context, "vkCmdSetPerformanceStreamMarkerINTEL");
			vkCmdSetPerformanceOverrideINTEL_ptr = load(context, "vkCmdSetPerformanceOverrideINTEL");
			vkAcquirePerformanceConfigurationINTEL_ptr = load(context, "vkAcquirePerformanceConfigurationINTEL");
			vkReleasePerformanceConfigurationINTEL_ptr = load(context, "vkReleasePerformanceConfigurationINTEL");
			vkQueueSetPerformanceConfigurationINTEL_ptr = load(context, "vkQueueSetPerformanceConfigurationINTEL");
			vkGetPerformanceParameterINTEL_ptr = load(context, "vkGetPerformanceParameterINTEL");
			vkSetLocalDimmingAMD_ptr = load(context, "vkSetLocalDimmingAMD");
			vkGetBufferDeviceAddressEXT_ptr = load(context, "vkGetBufferDeviceAddressEXT");
			vkCmdSetLineStippleEXT_ptr = load(context, "vkCmdSetLineStippleEXT");
			vkResetQueryPoolEXT_ptr = load(context, "vkResetQueryPoolEXT");
			vkCmdSetCullModeEXT_ptr = load(context, "vkCmdSetCullModeEXT");
			vkCmdSetFrontFaceEXT_ptr = load(context, "vkCmdSetFrontFaceEXT");
			vkCmdSetPrimitiveTopologyEXT_ptr = load(context, "vkCmdSetPrimitiveTopologyEXT");
			vkCmdSetViewportWithCountEXT_ptr = load(context, "vkCmdSetViewportWithCountEXT");
			vkCmdSetScissorWithCountEXT_ptr = load(context, "vkCmdSetScissorWithCountEXT");
			vkCmdBindVertexBuffers2EXT_ptr = load(context, "vkCmdBindVertexBuffers2EXT");
			vkCmdSetDepthTestEnableEXT_ptr = load(context, "vkCmdSetDepthTestEnableEXT");
			vkCmdSetDepthWriteEnableEXT_ptr = load(context, "vkCmdSetDepthWriteEnableEXT");
			vkCmdSetDepthCompareOpEXT_ptr = load(context, "vkCmdSetDepthCompareOpEXT");
			vkCmdSetDepthBoundsTestEnableEXT_ptr = load(context, "vkCmdSetDepthBoundsTestEnableEXT");
			vkCmdSetStencilTestEnableEXT_ptr = load(context, "vkCmdSetStencilTestEnableEXT");
			vkCmdSetStencilOpEXT_ptr = load(context, "vkCmdSetStencilOpEXT");
			vkGetGeneratedCommandsMemoryRequirementsNV_ptr = load(context, "vkGetGeneratedCommandsMemoryRequirementsNV");
			vkCmdPreprocessGeneratedCommandsNV_ptr = load(context, "vkCmdPreprocessGeneratedCommandsNV");
			vkCmdExecuteGeneratedCommandsNV_ptr = load(context, "vkCmdExecuteGeneratedCommandsNV");
			vkCmdBindPipelineShaderGroupNV_ptr = load(context, "vkCmdBindPipelineShaderGroupNV");
			vkCreateIndirectCommandsLayoutNV_ptr = load(context, "vkCreateIndirectCommandsLayoutNV");
			vkDestroyIndirectCommandsLayoutNV_ptr = load(context, "vkDestroyIndirectCommandsLayoutNV");
			vkCreatePrivateDataSlotEXT_ptr = load(context, "vkCreatePrivateDataSlotEXT");
			vkDestroyPrivateDataSlotEXT_ptr = load(context, "vkDestroyPrivateDataSlotEXT");
			vkSetPrivateDataEXT_ptr = load(context, "vkSetPrivateDataEXT");
			vkGetPrivateDataEXT_ptr = load(context, "vkGetPrivateDataEXT");
			vkGetAndroidHardwareBufferPropertiesANDROID_ptr = load(context, "vkGetAndroidHardwareBufferPropertiesANDROID");
			vkGetMemoryAndroidHardwareBufferANDROID_ptr = load(context, "vkGetMemoryAndroidHardwareBufferANDROID");
			vkCreateDeferredOperationKHR_ptr = load(context, "vkCreateDeferredOperationKHR");
			vkDestroyDeferredOperationKHR_ptr = load(context, "vkDestroyDeferredOperationKHR");
			vkGetDeferredOperationMaxConcurrencyKHR_ptr = load(context, "vkGetDeferredOperationMaxConcurrencyKHR");
			vkGetDeferredOperationResultKHR_ptr = load(context, "vkGetDeferredOperationResultKHR");
			vkDeferredOperationJoinKHR_ptr = load(context, "vkDeferredOperationJoinKHR");
			vkCreateAccelerationStructureKHR_ptr = load(context, "vkCreateAccelerationStructureKHR");
			vkGetAccelerationStructureMemoryRequirementsKHR_ptr = load(context, "vkGetAccelerationStructureMemoryRequirementsKHR");
			vkCmdBuildAccelerationStructureKHR_ptr = load(context, "vkCmdBuildAccelerationStructureKHR");
			vkCmdBuildAccelerationStructureIndirectKHR_ptr = load(context, "vkCmdBuildAccelerationStructureIndirectKHR");
			vkBuildAccelerationStructureKHR_ptr = load(context, "vkBuildAccelerationStructureKHR");
			vkCopyAccelerationStructureKHR_ptr = load(context, "vkCopyAccelerationStructureKHR");
			vkCopyAccelerationStructureToMemoryKHR_ptr = load(context, "vkCopyAccelerationStructureToMemoryKHR");
			vkCopyMemoryToAccelerationStructureKHR_ptr = load(context, "vkCopyMemoryToAccelerationStructureKHR");
			vkWriteAccelerationStructuresPropertiesKHR_ptr = load(context, "vkWriteAccelerationStructuresPropertiesKHR");
			vkCmdCopyAccelerationStructureKHR_ptr = load(context, "vkCmdCopyAccelerationStructureKHR");
			vkCmdCopyAccelerationStructureToMemoryKHR_ptr = load(context, "vkCmdCopyAccelerationStructureToMemoryKHR");
			vkCmdCopyMemoryToAccelerationStructureKHR_ptr = load(context, "vkCmdCopyMemoryToAccelerationStructureKHR");
			vkCmdTraceRaysKHR_ptr = load(context, "vkCmdTraceRaysKHR");
			vkCreateRayTracingPipelinesKHR_ptr = load(context, "vkCreateRayTracingPipelinesKHR");
			vkGetAccelerationStructureDeviceAddressKHR_ptr = load(context, "vkGetAccelerationStructureDeviceAddressKHR");
			vkGetRayTracingCaptureReplayShaderGroupHandlesKHR_ptr = load(context, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
			vkCmdTraceRaysIndirectKHR_ptr = load(context, "vkCmdTraceRaysIndirectKHR");
			vkGetDeviceAccelerationStructureCompatibilityKHR_ptr = load(context, "vkGetDeviceAccelerationStructureCompatibilityKHR");
		}
	}
}
